<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1242"><g><title>libsystem_kernel.dylib`close (1 samples, 0.08%)</title><rect x="0.0000%" y="437" width="0.0805%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.16%)</title><rect x="0.0805%" y="437" width="0.1610%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3305%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="0.2415%" y="437" width="0.0805%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4915%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="0.3221%" y="437" width="0.0805%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5721%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.16%)</title><rect x="0.4026%" y="437" width="0.1610%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="0.6526%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="0.5636%" y="437" width="0.0805%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.8136%" y="447.50"></text></g><g><title>wof-stats-parser`__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.6441%" y="437" width="0.0805%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.8941%" y="447.50"></text></g><g><title>wof-stats-parser`core::str::_&lt;impl str&gt;::trim_matches (7 samples, 0.56%)</title><rect x="0.7246%" y="437" width="0.5636%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="7"/><text x="0.9746%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.32%)</title><rect x="1.8519%" y="421" width="0.3221%" height="15" fill="rgb(218,30,26)" fg:x="23" fg:w="4"/><text x="2.1019%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.08%)</title><rect x="2.1739%" y="421" width="0.0805%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="1"/><text x="2.4239%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.08%)</title><rect x="2.1739%" y="405" width="0.0805%" height="15" fill="rgb(250,228,42)" fg:x="27" fg:w="1"/><text x="2.4239%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.32%)</title><rect x="2.2544%" y="421" width="0.3221%" height="15" fill="rgb(240,193,28)" fg:x="28" fg:w="4"/><text x="2.5044%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.08%)</title><rect x="2.5765%" y="421" width="0.0805%" height="15" fill="rgb(216,20,37)" fg:x="32" fg:w="1"/><text x="2.8265%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.08%)</title><rect x="2.5765%" y="405" width="0.0805%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="1"/><text x="2.8265%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.08%)</title><rect x="2.5765%" y="389" width="0.0805%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="1"/><text x="2.8265%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.08%)</title><rect x="2.6570%" y="421" width="0.0805%" height="15" fill="rgb(231,73,38)" fg:x="33" fg:w="1"/><text x="2.9070%" y="431.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.7375%" y="421" width="0.0805%" height="15" fill="rgb(225,20,46)" fg:x="34" fg:w="1"/><text x="2.9875%" y="431.50"></text></g><g><title>wof-stats-parser`chrono::naive::internals::Of::from_date_impl (1 samples, 0.08%)</title><rect x="2.7375%" y="405" width="0.0805%" height="15" fill="rgb(210,31,41)" fg:x="34" fg:w="1"/><text x="2.9875%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;ego_tree::iter::Traverse&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="2.8180%" y="421" width="0.3221%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="4"/><text x="3.0680%" y="431.50"></text></g><g><title>wof-stats-parser`&lt;polars_io::csv::write::CsvWriter&lt;W&gt; as polars_io::SerWriter&lt;W&gt;&gt;::finish (2 samples, 0.16%)</title><rect x="3.1401%" y="421" width="0.1610%" height="15" fill="rgb(226,26,5)" fg:x="39" fg:w="2"/><text x="3.3901%" y="431.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write (2 samples, 0.16%)</title><rect x="3.1401%" y="405" width="0.1610%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="2"/><text x="3.3901%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.16%)</title><rect x="3.1401%" y="389" width="0.1610%" height="15" fill="rgb(235,183,28)" fg:x="39" fg:w="2"/><text x="3.3901%" y="399.50"></text></g><g><title>wof-stats-parser`&lt;ego_tree::iter::Traverse&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="3.6232%" y="405" width="0.7246%" height="15" fill="rgb(221,5,38)" fg:x="45" fg:w="9"/><text x="3.8732%" y="415.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="4.3478%" y="405" width="0.0805%" height="15" fill="rgb(247,18,42)" fg:x="54" fg:w="1"/><text x="4.5978%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="4.9114%" y="389" width="0.2415%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="3"/><text x="5.1614%" y="399.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;selectors::nth_index_cache::NthIndexCache&gt; (5 samples, 0.40%)</title><rect x="5.1530%" y="389" width="0.4026%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="5"/><text x="5.4030%" y="399.50"></text></g><g><title>wof-stats-parser`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="5.2335%" y="373" width="0.3221%" height="15" fill="rgb(225,111,53)" fg:x="65" fg:w="4"/><text x="5.4835%" y="383.50"></text></g><g><title>wof-stats-parser`scraper::selector::Selector::matches_with_scope (19 samples, 1.53%)</title><rect x="4.4283%" y="405" width="1.5298%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="19"/><text x="4.6783%" y="415.50"></text></g><g><title>wof-stats-parser`selectors::matching::matches_complex_selector_internal (5 samples, 0.40%)</title><rect x="5.5556%" y="389" width="0.4026%" height="15" fill="rgb(214,148,48)" fg:x="69" fg:w="5"/><text x="5.8056%" y="399.50"></text></g><g><title>wof-stats-parser`scraper::element_ref::element::_&lt;impl selectors::tree::Element for scraper::element_ref::ElementRef&gt;::is_link (1 samples, 0.08%)</title><rect x="5.8776%" y="373" width="0.0805%" height="15" fill="rgb(232,36,49)" fg:x="73" fg:w="1"/><text x="6.1276%" y="383.50"></text></g><g><title>wof-stats-parser`&lt;scraper::element_ref::Select as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.74%)</title><rect x="3.3011%" y="421" width="2.7375%" height="15" fill="rgb(209,103,24)" fg:x="41" fg:w="34"/><text x="3.5511%" y="431.50">wo..</text></g><g><title>wof-stats-parser`selectors::matching::matches_complex_selector_internal (1 samples, 0.08%)</title><rect x="5.9581%" y="405" width="0.0805%" height="15" fill="rgb(229,88,8)" fg:x="74" fg:w="1"/><text x="6.2081%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="6.0386%" y="421" width="0.3221%" height="15" fill="rgb(213,181,19)" fg:x="75" fg:w="4"/><text x="6.2886%" y="431.50"></text></g><g><title>wof-stats-parser`servo_arc::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="6.1192%" y="405" width="0.2415%" height="15" fill="rgb(254,191,54)" fg:x="76" fg:w="3"/><text x="6.3692%" y="415.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;selectors::parser::Component&lt;scraper::selector::Simple&gt;&gt; (3 samples, 0.24%)</title><rect x="6.1192%" y="389" width="0.2415%" height="15" fill="rgb(241,83,37)" fg:x="76" fg:w="3"/><text x="6.3692%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.48%)</title><rect x="6.5217%" y="405" width="0.4831%" height="15" fill="rgb(233,36,39)" fg:x="81" fg:w="6"/><text x="6.7717%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.16%)</title><rect x="7.0048%" y="405" width="0.1610%" height="15" fill="rgb(226,3,54)" fg:x="87" fg:w="2"/><text x="7.2548%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1659%" y="405" width="0.0805%" height="15" fill="rgb(245,192,40)" fg:x="89" fg:w="1"/><text x="7.4159%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="7.7295%" y="389" width="0.0805%" height="15" fill="rgb(238,167,29)" fg:x="96" fg:w="1"/><text x="7.9795%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="7.8100%" y="389" width="0.0805%" height="15" fill="rgb(232,182,51)" fg:x="97" fg:w="1"/><text x="8.0600%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.08%)</title><rect x="7.8905%" y="389" width="0.0805%" height="15" fill="rgb(231,60,39)" fg:x="98" fg:w="1"/><text x="8.1405%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.32%)</title><rect x="8.1320%" y="373" width="0.3221%" height="15" fill="rgb(208,69,12)" fg:x="101" fg:w="4"/><text x="8.3820%" y="383.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;scraper::html::Html&gt; (27 samples, 2.17%)</title><rect x="6.3607%" y="421" width="2.1739%" height="15" fill="rgb(235,93,37)" fg:x="79" fg:w="27"/><text x="6.6107%" y="431.50">w..</text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;ego_tree::Node&lt;scraper::node::Node&gt;&gt; (16 samples, 1.29%)</title><rect x="7.2464%" y="405" width="1.2882%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="16"/><text x="7.4964%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="7.9710%" y="389" width="0.5636%" height="15" fill="rgb(222,207,29)" fg:x="99" fg:w="7"/><text x="8.2210%" y="399.50"></text></g><g><title>wof-stats-parser`string_cache::dynamic_set::Set::remove (1 samples, 0.08%)</title><rect x="8.4541%" y="373" width="0.0805%" height="15" fill="rgb(206,96,30)" fg:x="105" fg:w="1"/><text x="8.7041%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="8.4541%" y="357" width="0.0805%" height="15" fill="rgb(218,138,4)" fg:x="105" fg:w="1"/><text x="8.7041%" y="367.50"></text></g><g><title>wof-stats-parser`core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="8.5346%" y="421" width="0.0805%" height="15" fill="rgb(250,191,14)" fg:x="106" fg:w="1"/><text x="8.7846%" y="431.50"></text></g><g><title>wof-stats-parser`cssparser::parser::parse_until_before (1 samples, 0.08%)</title><rect x="8.6151%" y="421" width="0.0805%" height="15" fill="rgb(239,60,40)" fg:x="107" fg:w="1"/><text x="8.8651%" y="431.50"></text></g><g><title>wof-stats-parser`indicatif::progress_bar::ProgressBar::tick_inner (1 samples, 0.08%)</title><rect x="8.6957%" y="421" width="0.0805%" height="15" fill="rgb(206,27,48)" fg:x="108" fg:w="1"/><text x="8.9457%" y="431.50"></text></g><g><title>wof-stats-parser`indicatif::state::BarState::update_estimate_and_draw (1 samples, 0.08%)</title><rect x="8.6957%" y="405" width="0.0805%" height="15" fill="rgb(225,35,8)" fg:x="108" fg:w="1"/><text x="8.9457%" y="415.50"></text></g><g><title>wof-stats-parser`indicatif::state::BarState::draw (1 samples, 0.08%)</title><rect x="8.6957%" y="389" width="0.0805%" height="15" fill="rgb(250,213,24)" fg:x="108" fg:w="1"/><text x="8.9457%" y="399.50"></text></g><g><title>wof-stats-parser`indicatif::draw_target::ProgressDrawTarget::width (1 samples, 0.08%)</title><rect x="8.6957%" y="373" width="0.0805%" height="15" fill="rgb(247,123,22)" fg:x="108" fg:w="1"/><text x="8.9457%" y="383.50"></text></g><g><title>wof-stats-parser`console::unix_term::terminal_size (1 samples, 0.08%)</title><rect x="8.6957%" y="357" width="0.0805%" height="15" fill="rgb(231,138,38)" fg:x="108" fg:w="1"/><text x="8.9457%" y="367.50"></text></g><g><title>libsystem_c.dylib`isatty (1 samples, 0.08%)</title><rect x="8.6957%" y="341" width="0.0805%" height="15" fill="rgb(231,145,46)" fg:x="108" fg:w="1"/><text x="8.9457%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.08%)</title><rect x="8.6957%" y="325" width="0.0805%" height="15" fill="rgb(251,118,11)" fg:x="108" fg:w="1"/><text x="8.9457%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="8.7762%" y="405" width="0.0805%" height="15" fill="rgb(217,147,25)" fg:x="109" fg:w="1"/><text x="9.0262%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="8.9372%" y="389" width="0.0805%" height="15" fill="rgb(247,81,37)" fg:x="111" fg:w="1"/><text x="9.1872%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="9.0177%" y="389" width="0.0805%" height="15" fill="rgb(209,12,38)" fg:x="112" fg:w="1"/><text x="9.2677%" y="399.50"></text></g><g><title>wof-stats-parser`polars_core::chunked_array::upstream_traits::_&lt;impl core::iter::traits::collect::FromIterator&lt;Ptr&gt; for polars_core::chunked_array::ChunkedArray&lt;polars_core::datatypes::Utf8Type&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="8.7762%" y="421" width="0.4026%" height="15" fill="rgb(227,1,9)" fg:x="109" fg:w="5"/><text x="9.0262%" y="431.50"></text></g><g><title>wof-stats-parser`&lt;arrow2::array::utf8::mutable_values::MutableUtf8ValuesArray&lt;O&gt; as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="8.8567%" y="405" width="0.3221%" height="15" fill="rgb(248,47,43)" fg:x="110" fg:w="4"/><text x="9.1067%" y="415.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;arrow2::error::Error&gt; (1 samples, 0.08%)</title><rect x="9.0982%" y="389" width="0.0805%" height="15" fill="rgb(221,10,30)" fg:x="113" fg:w="1"/><text x="9.3482%" y="399.50"></text></g><g><title>wof-stats-parser`core::str::converts::from_utf8 (6 samples, 0.48%)</title><rect x="9.1787%" y="405" width="0.4831%" height="15" fill="rgb(210,229,1)" fg:x="114" fg:w="6"/><text x="9.4287%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.16%)</title><rect x="9.8229%" y="389" width="0.1610%" height="15" fill="rgb(222,148,37)" fg:x="122" fg:w="2"/><text x="10.0729%" y="399.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;html5ever::serialize::HtmlSerializer&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="9.9839%" y="389" width="0.1610%" height="15" fill="rgb(234,67,33)" fg:x="124" fg:w="2"/><text x="10.2339%" y="399.50"></text></g><g><title>wof-stats-parser`core::fmt::write (2 samples, 0.16%)</title><rect x="11.5137%" y="357" width="0.1610%" height="15" fill="rgb(247,98,35)" fg:x="143" fg:w="2"/><text x="11.7637%" y="367.50"></text></g><g><title>wof-stats-parser`&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="11.9163%" y="341" width="0.0805%" height="15" fill="rgb(247,138,52)" fg:x="148" fg:w="1"/><text x="12.1663%" y="351.50"></text></g><g><title>wof-stats-parser`core::fmt::Write::write_char (1 samples, 0.08%)</title><rect x="11.9968%" y="341" width="0.0805%" height="15" fill="rgb(213,79,30)" fg:x="149" fg:w="1"/><text x="12.2468%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.32%)</title><rect x="12.5604%" y="325" width="0.3221%" height="15" fill="rgb(246,177,23)" fg:x="156" fg:w="4"/><text x="12.8104%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;char as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="12.8824%" y="325" width="0.6441%" height="15" fill="rgb(230,62,27)" fg:x="160" fg:w="8"/><text x="13.1324%" y="335.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (2 samples, 0.16%)</title><rect x="13.5266%" y="325" width="0.1610%" height="15" fill="rgb(216,154,8)" fg:x="168" fg:w="2"/><text x="13.7766%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="14.8148%" y="293" width="0.0805%" height="15" fill="rgb(244,35,45)" fg:x="184" fg:w="1"/><text x="15.0648%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.16%)</title><rect x="14.8953%" y="293" width="0.1610%" height="15" fill="rgb(251,115,12)" fg:x="185" fg:w="2"/><text x="15.1453%" y="303.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$realloc (1 samples, 0.08%)</title><rect x="15.0564%" y="293" width="0.0805%" height="15" fill="rgb(240,54,50)" fg:x="187" fg:w="1"/><text x="15.3064%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.08%)</title><rect x="15.2174%" y="277" width="0.0805%" height="15" fill="rgb(233,84,52)" fg:x="189" fg:w="1"/><text x="15.4674%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.08%)</title><rect x="15.2174%" y="261" width="0.0805%" height="15" fill="rgb(207,117,47)" fg:x="189" fg:w="1"/><text x="15.4674%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="15.2979%" y="277" width="0.0805%" height="15" fill="rgb(249,43,39)" fg:x="190" fg:w="1"/><text x="15.5479%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="15.4589%" y="245" width="0.0805%" height="15" fill="rgb(209,38,44)" fg:x="192" fg:w="1"/><text x="15.7089%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.48%)</title><rect x="15.5395%" y="245" width="0.4831%" height="15" fill="rgb(236,212,23)" fg:x="193" fg:w="6"/><text x="15.7895%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.08%)</title><rect x="15.9420%" y="229" width="0.0805%" height="15" fill="rgb(242,79,21)" fg:x="198" fg:w="1"/><text x="16.1920%" y="239.50"></text></g><g><title>wof-stats-parser`html5ever::serialize::HtmlSerializer&lt;Wr&gt;::write_escaped (70 samples, 5.64%)</title><rect x="10.4670%" y="373" width="5.6361%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="70"/><text x="10.7170%" y="383.50">wof-sta..</text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (55 samples, 4.43%)</title><rect x="11.6747%" y="357" width="4.4283%" height="15" fill="rgb(253,215,40)" fg:x="145" fg:w="55"/><text x="11.9247%" y="367.50">wof-s..</text></g><g><title>wof-stats-parser`core::fmt::write (50 samples, 4.03%)</title><rect x="12.0773%" y="341" width="4.0258%" height="15" fill="rgb(211,81,21)" fg:x="150" fg:w="50"/><text x="12.3273%" y="351.50">wof-..</text></g><g><title>wof-stats-parser`core::fmt::Write::write_char (30 samples, 2.42%)</title><rect x="13.6876%" y="325" width="2.4155%" height="15" fill="rgb(208,190,38)" fg:x="170" fg:w="30"/><text x="13.9376%" y="335.50">wo..</text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 1.37%)</title><rect x="14.7343%" y="309" width="1.3688%" height="15" fill="rgb(235,213,38)" fg:x="183" fg:w="17"/><text x="14.9843%" y="319.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (12 samples, 0.97%)</title><rect x="15.1369%" y="293" width="0.9662%" height="15" fill="rgb(237,122,38)" fg:x="188" fg:w="12"/><text x="15.3869%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.72%)</title><rect x="15.3784%" y="277" width="0.7246%" height="15" fill="rgb(244,218,35)" fg:x="191" fg:w="9"/><text x="15.6284%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.64%)</title><rect x="15.4589%" y="261" width="0.6441%" height="15" fill="rgb(240,68,47)" fg:x="192" fg:w="8"/><text x="15.7089%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="16.0225%" y="245" width="0.0805%" height="15" fill="rgb(210,16,53)" fg:x="199" fg:w="1"/><text x="16.2725%" y="255.50"></text></g><g><title>wof-stats-parser`scraper::element_ref::ElementRef::inner_html (90 samples, 7.25%)</title><rect x="9.1787%" y="421" width="7.2464%" height="15" fill="rgb(235,124,12)" fg:x="114" fg:w="90"/><text x="9.4287%" y="431.50">wof-stats-..</text></g><g><title>wof-stats-parser`scraper::element_ref::ElementRef::serialize (84 samples, 6.76%)</title><rect x="9.6618%" y="405" width="6.7633%" height="15" fill="rgb(224,169,11)" fg:x="120" fg:w="84"/><text x="9.9118%" y="415.50">wof-stats..</text></g><g><title>wof-stats-parser`scraper::node::serializable::serialize (78 samples, 6.28%)</title><rect x="10.1449%" y="389" width="6.2802%" height="15" fill="rgb(250,166,2)" fg:x="126" fg:w="78"/><text x="10.3949%" y="399.50">wof-stat..</text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (4 samples, 0.32%)</title><rect x="16.1031%" y="373" width="0.3221%" height="15" fill="rgb(242,216,29)" fg:x="200" fg:w="4"/><text x="16.3531%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="16.4251%" y="405" width="0.0805%" height="15" fill="rgb(230,116,27)" fg:x="204" fg:w="1"/><text x="16.6751%" y="415.50"></text></g><g><title>wof-stats-parser`markup5ever::interface::tree_builder::create_element (2 samples, 0.16%)</title><rect x="16.5056%" y="405" width="0.1610%" height="15" fill="rgb(228,99,48)" fg:x="205" fg:w="2"/><text x="16.7556%" y="415.50"></text></g><g><title>wof-stats-parser`&lt;markup5ever::interface::ExpandedName as core::cmp::PartialEq&lt;markup5ever::interface::ExpandedName&gt;&gt;::eq (2 samples, 0.16%)</title><rect x="16.5056%" y="389" width="0.1610%" height="15" fill="rgb(253,11,6)" fg:x="205" fg:w="2"/><text x="16.7556%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="16.6667%" y="389" width="0.0805%" height="15" fill="rgb(247,143,39)" fg:x="207" fg:w="1"/><text x="16.9167%" y="399.50"></text></g><g><title>wof-stats-parser`core::char::methods::encode_utf8_raw (2 samples, 0.16%)</title><rect x="16.8277%" y="373" width="0.1610%" height="15" fill="rgb(236,97,10)" fg:x="209" fg:w="2"/><text x="17.0777%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::create_attribute (1 samples, 0.08%)</title><rect x="16.9887%" y="373" width="0.0805%" height="15" fill="rgb(233,208,19)" fg:x="211" fg:w="1"/><text x="17.2387%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::create_tag (1 samples, 0.08%)</title><rect x="17.0692%" y="373" width="0.0805%" height="15" fill="rgb(216,164,2)" fg:x="212" fg:w="1"/><text x="17.3192%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::emit_current_tag (1 samples, 0.08%)</title><rect x="17.1498%" y="373" width="0.0805%" height="15" fill="rgb(220,129,5)" fg:x="213" fg:w="1"/><text x="17.3998%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::get_preprocessed_char (3 samples, 0.24%)</title><rect x="17.2303%" y="373" width="0.2415%" height="15" fill="rgb(242,17,10)" fg:x="214" fg:w="3"/><text x="17.4803%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::pop_except_from (3 samples, 0.24%)</title><rect x="17.4718%" y="373" width="0.2415%" height="15" fill="rgb(242,107,0)" fg:x="217" fg:w="3"/><text x="17.7218%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.16%)</title><rect x="22.3833%" y="357" width="0.1610%" height="15" fill="rgb(251,28,31)" fg:x="278" fg:w="2"/><text x="22.6333%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 1.69%)</title><rect x="22.5443%" y="357" width="1.6908%" height="15" fill="rgb(233,223,10)" fg:x="280" fg:w="21"/><text x="22.7943%" y="367.50"></text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (2 samples, 0.16%)</title><rect x="24.2351%" y="357" width="0.1610%" height="15" fill="rgb(215,21,27)" fg:x="301" fg:w="2"/><text x="24.4851%" y="367.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="24.3961%" y="357" width="0.0805%" height="15" fill="rgb(232,23,21)" fg:x="303" fg:w="1"/><text x="24.6461%" y="367.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (3 samples, 0.24%)</title><rect x="24.4767%" y="357" width="0.2415%" height="15" fill="rgb(244,5,23)" fg:x="304" fg:w="3"/><text x="24.7267%" y="367.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="24.7182%" y="341" width="0.0805%" height="15" fill="rgb(226,81,46)" fg:x="307" fg:w="1"/><text x="24.9682%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::create_attribute (2 samples, 0.16%)</title><rect x="24.7182%" y="357" width="0.1610%" height="15" fill="rgb(247,70,30)" fg:x="307" fg:w="2"/><text x="24.9682%" y="367.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::finish_attribute (1 samples, 0.08%)</title><rect x="24.7987%" y="341" width="0.0805%" height="15" fill="rgb(212,68,19)" fg:x="308" fg:w="1"/><text x="25.0487%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="24.7987%" y="325" width="0.0805%" height="15" fill="rgb(240,187,13)" fg:x="308" fg:w="1"/><text x="25.0487%" y="335.50"></text></g><g><title>wof-stats-parser`string_cache::dynamic_set::Set::insert (1 samples, 0.08%)</title><rect x="24.7987%" y="309" width="0.0805%" height="15" fill="rgb(223,113,26)" fg:x="308" fg:w="1"/><text x="25.0487%" y="319.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (4 samples, 0.32%)</title><rect x="24.8792%" y="341" width="0.3221%" height="15" fill="rgb(206,192,2)" fg:x="309" fg:w="4"/><text x="25.1292%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::discard_tag (1 samples, 0.08%)</title><rect x="25.2013%" y="341" width="0.0805%" height="15" fill="rgb(241,108,4)" fg:x="313" fg:w="1"/><text x="25.4513%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::create_tag (9 samples, 0.72%)</title><rect x="24.8792%" y="357" width="0.7246%" height="15" fill="rgb(247,173,49)" fg:x="309" fg:w="9"/><text x="25.1292%" y="367.50"></text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_bytes_without_validating (4 samples, 0.32%)</title><rect x="25.2818%" y="341" width="0.3221%" height="15" fill="rgb(224,114,35)" fg:x="314" fg:w="4"/><text x="25.5318%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.64%)</title><rect x="25.6039%" y="341" width="0.6441%" height="15" fill="rgb(245,159,27)" fg:x="318" fg:w="8"/><text x="25.8539%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (2 samples, 0.16%)</title><rect x="26.2480%" y="341" width="0.1610%" height="15" fill="rgb(245,172,44)" fg:x="326" fg:w="2"/><text x="26.4980%" y="351.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (4 samples, 0.32%)</title><rect x="26.4090%" y="341" width="0.3221%" height="15" fill="rgb(236,23,11)" fg:x="328" fg:w="4"/><text x="26.6590%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="26.8116%" y="325" width="0.2415%" height="15" fill="rgb(205,117,38)" fg:x="333" fg:w="3"/><text x="27.0616%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="28.2609%" y="309" width="0.2415%" height="15" fill="rgb(237,72,25)" fg:x="351" fg:w="3"/><text x="28.5109%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.24%)</title><rect x="30.1127%" y="261" width="0.2415%" height="15" fill="rgb(244,70,9)" fg:x="374" fg:w="3"/><text x="30.3627%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.24%)</title><rect x="30.3543%" y="261" width="0.2415%" height="15" fill="rgb(217,125,39)" fg:x="377" fg:w="3"/><text x="30.6043%" y="271.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$malloc (1 samples, 0.08%)</title><rect x="30.5958%" y="261" width="0.0805%" height="15" fill="rgb(235,36,10)" fg:x="380" fg:w="1"/><text x="30.8458%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.89%)</title><rect x="29.8712%" y="277" width="0.8857%" height="15" fill="rgb(251,123,47)" fg:x="371" fg:w="11"/><text x="30.1212%" y="287.50"></text></g><g><title>wof-stats-parser`__rdl_alloc (1 samples, 0.08%)</title><rect x="30.6763%" y="261" width="0.0805%" height="15" fill="rgb(221,13,13)" fg:x="381" fg:w="1"/><text x="30.9263%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 1.29%)</title><rect x="29.7101%" y="293" width="1.2882%" height="15" fill="rgb(238,131,9)" fg:x="369" fg:w="16"/><text x="29.9601%" y="303.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="30.7568%" y="277" width="0.2415%" height="15" fill="rgb(211,50,8)" fg:x="382" fg:w="3"/><text x="31.0068%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_appropriately (1 samples, 0.08%)</title><rect x="30.9984%" y="293" width="0.0805%" height="15" fill="rgb(245,182,24)" fg:x="385" fg:w="1"/><text x="31.2484%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::reconstruct_formatting (2 samples, 0.16%)</title><rect x="31.0789%" y="293" width="0.1610%" height="15" fill="rgb(242,14,37)" fg:x="386" fg:w="2"/><text x="31.3289%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.81%)</title><rect x="31.8035%" y="245" width="0.8052%" height="15" fill="rgb(246,228,12)" fg:x="395" fg:w="10"/><text x="32.0535%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="32.6087%" y="245" width="0.0805%" height="15" fill="rgb(213,55,15)" fg:x="405" fg:w="1"/><text x="32.8587%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (1 samples, 0.08%)</title><rect x="32.6892%" y="245" width="0.0805%" height="15" fill="rgb(209,9,3)" fg:x="406" fg:w="1"/><text x="32.9392%" y="255.50"></text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::append (14 samples, 1.13%)</title><rect x="31.7230%" y="261" width="1.1272%" height="15" fill="rgb(230,59,30)" fg:x="394" fg:w="14"/><text x="31.9730%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (1 samples, 0.08%)</title><rect x="32.7697%" y="245" width="0.0805%" height="15" fill="rgb(209,121,21)" fg:x="407" fg:w="1"/><text x="33.0197%" y="255.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.7697%" y="229" width="0.0805%" height="15" fill="rgb(220,109,13)" fg:x="407" fg:w="1"/><text x="33.0197%" y="239.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.7697%" y="213" width="0.0805%" height="15" fill="rgb(232,18,1)" fg:x="407" fg:w="1"/><text x="33.0197%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="32.7697%" y="197" width="0.0805%" height="15" fill="rgb(215,41,42)" fg:x="407" fg:w="1"/><text x="33.0197%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="32.7697%" y="181" width="0.0805%" height="15" fill="rgb(224,123,36)" fg:x="407" fg:w="1"/><text x="33.0197%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="32.7697%" y="165" width="0.0805%" height="15" fill="rgb(240,125,3)" fg:x="407" fg:w="1"/><text x="33.0197%" y="175.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_appropriately (15 samples, 1.21%)</title><rect x="31.7230%" y="277" width="1.2077%" height="15" fill="rgb(205,98,50)" fg:x="394" fg:w="15"/><text x="31.9730%" y="287.50"></text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_tendril (1 samples, 0.08%)</title><rect x="32.8502%" y="261" width="0.0805%" height="15" fill="rgb(205,185,37)" fg:x="408" fg:w="1"/><text x="33.1002%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (74 samples, 5.96%)</title><rect x="27.0531%" y="325" width="5.9581%" height="15" fill="rgb(238,207,15)" fg:x="336" fg:w="74"/><text x="27.3031%" y="335.50">wof-stat..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (56 samples, 4.51%)</title><rect x="28.5024%" y="309" width="4.5089%" height="15" fill="rgb(213,199,42)" fg:x="354" fg:w="56"/><text x="28.7524%" y="319.50">wof-s..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (22 samples, 1.77%)</title><rect x="31.2399%" y="293" width="1.7713%" height="15" fill="rgb(235,201,11)" fg:x="388" fg:w="22"/><text x="31.4899%" y="303.50">w..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::process_chars_in_table::table_outer (1 samples, 0.08%)</title><rect x="32.9308%" y="277" width="0.0805%" height="15" fill="rgb(207,46,11)" fg:x="409" fg:w="1"/><text x="33.1808%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::process_token (80 samples, 6.44%)</title><rect x="26.7311%" y="341" width="6.4412%" height="15" fill="rgb(241,35,35)" fg:x="332" fg:w="80"/><text x="26.9811%" y="351.50">wof-stat..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (2 samples, 0.16%)</title><rect x="33.0113%" y="325" width="0.1610%" height="15" fill="rgb(243,32,47)" fg:x="410" fg:w="2"/><text x="33.2613%" y="335.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::emit_char (96 samples, 7.73%)</title><rect x="25.6039%" y="357" width="7.7295%" height="15" fill="rgb(247,202,23)" fg:x="318" fg:w="96"/><text x="25.8539%" y="367.50">wof-stats-p..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_bytes_without_validating (2 samples, 0.16%)</title><rect x="33.1723%" y="341" width="0.1610%" height="15" fill="rgb(219,102,11)" fg:x="412" fg:w="2"/><text x="33.4223%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.56%)</title><rect x="33.9775%" y="341" width="0.5636%" height="15" fill="rgb(243,110,44)" fg:x="422" fg:w="7"/><text x="34.2275%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (1 samples, 0.08%)</title><rect x="34.5411%" y="341" width="0.0805%" height="15" fill="rgb(222,74,54)" fg:x="429" fg:w="1"/><text x="34.7911%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (16 samples, 1.29%)</title><rect x="34.6216%" y="341" width="1.2882%" height="15" fill="rgb(216,99,12)" fg:x="430" fg:w="16"/><text x="34.8716%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.16%)</title><rect x="36.1514%" y="325" width="0.1610%" height="15" fill="rgb(226,22,26)" fg:x="449" fg:w="2"/><text x="36.4014%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;markup5ever::LocalNameStaticSet as string_cache::static_sets::StaticAtomSet&gt;::get (1 samples, 0.08%)</title><rect x="36.3124%" y="325" width="0.0805%" height="15" fill="rgb(217,163,10)" fg:x="451" fg:w="1"/><text x="36.5624%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (2 samples, 0.16%)</title><rect x="36.3929%" y="325" width="0.1610%" height="15" fill="rgb(213,25,53)" fg:x="452" fg:w="2"/><text x="36.6429%" y="335.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::finish_attribute (10 samples, 0.81%)</title><rect x="35.9098%" y="341" width="0.8052%" height="15" fill="rgb(252,105,26)" fg:x="446" fg:w="10"/><text x="36.1598%" y="351.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="36.5539%" y="325" width="0.1610%" height="15" fill="rgb(220,39,43)" fg:x="454" fg:w="2"/><text x="36.8039%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="36.6345%" y="309" width="0.0805%" height="15" fill="rgb(229,68,48)" fg:x="455" fg:w="1"/><text x="36.8845%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="38.3253%" y="309" width="0.0805%" height="15" fill="rgb(252,8,32)" fg:x="476" fg:w="1"/><text x="38.5753%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.16%)</title><rect x="38.4058%" y="309" width="0.1610%" height="15" fill="rgb(223,20,43)" fg:x="477" fg:w="2"/><text x="38.6558%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.5668%" y="309" width="0.1610%" height="15" fill="rgb(229,81,49)" fg:x="479" fg:w="2"/><text x="38.8168%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.08%)</title><rect x="38.7279%" y="309" width="0.0805%" height="15" fill="rgb(236,28,36)" fg:x="481" fg:w="1"/><text x="38.9779%" y="319.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;html5ever::tree_builder::types::ProcessResult&lt;ego_tree::NodeId&gt;&gt; (3 samples, 0.24%)</title><rect x="38.8084%" y="309" width="0.2415%" height="15" fill="rgb(249,185,26)" fg:x="482" fg:w="3"/><text x="39.0584%" y="319.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::in_scope_named (4 samples, 0.32%)</title><rect x="39.0499%" y="309" width="0.3221%" height="15" fill="rgb(249,174,33)" fg:x="485" fg:w="4"/><text x="39.2999%" y="319.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element (1 samples, 0.08%)</title><rect x="39.3720%" y="309" width="0.0805%" height="15" fill="rgb(233,201,37)" fg:x="489" fg:w="1"/><text x="39.6220%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="42.2705%" y="293" width="0.0805%" height="15" fill="rgb(221,78,26)" fg:x="525" fg:w="1"/><text x="42.5205%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="42.3510%" y="293" width="0.1610%" height="15" fill="rgb(250,127,30)" fg:x="526" fg:w="2"/><text x="42.6010%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.40%)</title><rect x="42.5121%" y="293" width="0.4026%" height="15" fill="rgb(230,49,44)" fg:x="528" fg:w="5"/><text x="42.7621%" y="303.50"></text></g><g><title>wof-stats-parser`alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="42.9147%" y="293" width="0.0805%" height="15" fill="rgb(229,67,23)" fg:x="533" fg:w="1"/><text x="43.1647%" y="303.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;html5ever::tokenizer::interface::Tag&gt; (1 samples, 0.08%)</title><rect x="42.9952%" y="293" width="0.0805%" height="15" fill="rgb(249,83,47)" fg:x="534" fg:w="1"/><text x="43.2452%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::appropriate_place_for_insertion (2 samples, 0.16%)</title><rect x="43.0757%" y="293" width="0.1610%" height="15" fill="rgb(215,43,3)" fg:x="535" fg:w="2"/><text x="43.3257%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::expect_to_close (2 samples, 0.16%)</title><rect x="43.2367%" y="293" width="0.1610%" height="15" fill="rgb(238,154,13)" fg:x="537" fg:w="2"/><text x="43.4867%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::pop_until_named (2 samples, 0.16%)</title><rect x="43.2367%" y="277" width="0.1610%" height="15" fill="rgb(219,56,2)" fg:x="537" fg:w="2"/><text x="43.4867%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::generate_implied_end (2 samples, 0.16%)</title><rect x="43.3977%" y="293" width="0.1610%" height="15" fill="rgb(233,0,4)" fg:x="539" fg:w="2"/><text x="43.6477%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::appropriate_place_for_insertion (6 samples, 0.48%)</title><rect x="43.7198%" y="277" width="0.4831%" height="15" fill="rgb(235,30,7)" fg:x="543" fg:w="6"/><text x="43.9698%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.24%)</title><rect x="44.6860%" y="261" width="0.2415%" height="15" fill="rgb(250,79,13)" fg:x="555" fg:w="3"/><text x="44.9360%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.16%)</title><rect x="44.9275%" y="261" width="0.1610%" height="15" fill="rgb(211,146,34)" fg:x="558" fg:w="2"/><text x="45.1775%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0886%" y="261" width="0.0805%" height="15" fill="rgb(228,22,38)" fg:x="560" fg:w="1"/><text x="45.3386%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="45.1691%" y="261" width="0.0805%" height="15" fill="rgb(235,168,5)" fg:x="561" fg:w="1"/><text x="45.4191%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (2 samples, 0.16%)</title><rect x="45.2496%" y="261" width="0.1610%" height="15" fill="rgb(221,155,16)" fg:x="562" fg:w="2"/><text x="45.4996%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::detach (1 samples, 0.08%)</title><rect x="45.3301%" y="245" width="0.0805%" height="15" fill="rgb(215,215,53)" fg:x="563" fg:w="1"/><text x="45.5801%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::detach (1 samples, 0.08%)</title><rect x="45.4106%" y="261" width="0.0805%" height="15" fill="rgb(223,4,10)" fg:x="564" fg:w="1"/><text x="45.6606%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.08%)</title><rect x="45.9742%" y="165" width="0.0805%" height="15" fill="rgb(234,103,6)" fg:x="571" fg:w="1"/><text x="46.2242%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.08%)</title><rect x="45.9742%" y="149" width="0.0805%" height="15" fill="rgb(227,97,0)" fg:x="571" fg:w="1"/><text x="46.2242%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.24%)</title><rect x="45.8937%" y="181" width="0.2415%" height="15" fill="rgb(234,150,53)" fg:x="570" fg:w="3"/><text x="46.1437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.08%)</title><rect x="46.0548%" y="165" width="0.0805%" height="15" fill="rgb(228,201,54)" fg:x="572" fg:w="1"/><text x="46.3048%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.08%)</title><rect x="46.0548%" y="149" width="0.0805%" height="15" fill="rgb(222,22,37)" fg:x="572" fg:w="1"/><text x="46.3048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.32%)</title><rect x="45.8937%" y="197" width="0.3221%" height="15" fill="rgb(237,53,32)" fg:x="570" fg:w="4"/><text x="46.1437%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="46.1353%" y="181" width="0.0805%" height="15" fill="rgb(233,25,53)" fg:x="573" fg:w="1"/><text x="46.3853%" y="191.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (10 samples, 0.81%)</title><rect x="45.4911%" y="261" width="0.8052%" height="15" fill="rgb(210,40,34)" fg:x="565" fg:w="10"/><text x="45.7411%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="45.8937%" y="245" width="0.4026%" height="15" fill="rgb(241,220,44)" fg:x="570" fg:w="5"/><text x="46.1437%" y="255.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="45.8937%" y="229" width="0.4026%" height="15" fill="rgb(235,28,35)" fg:x="570" fg:w="5"/><text x="46.1437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.40%)</title><rect x="45.8937%" y="213" width="0.4026%" height="15" fill="rgb(210,56,17)" fg:x="570" fg:w="5"/><text x="46.1437%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.08%)</title><rect x="46.2158%" y="197" width="0.0805%" height="15" fill="rgb(224,130,29)" fg:x="574" fg:w="1"/><text x="46.4658%" y="207.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$realloc (1 samples, 0.08%)</title><rect x="46.6184%" y="245" width="0.0805%" height="15" fill="rgb(235,212,8)" fg:x="579" fg:w="1"/><text x="46.8684%" y="255.50"></text></g><g><title>wof-stats-parser`__rdl_realloc (1 samples, 0.08%)</title><rect x="46.6989%" y="245" width="0.0805%" height="15" fill="rgb(223,33,50)" fg:x="580" fg:w="1"/><text x="46.9489%" y="255.50"></text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::append (35 samples, 2.82%)</title><rect x="44.2029%" y="277" width="2.8180%" height="15" fill="rgb(219,149,13)" fg:x="549" fg:w="35"/><text x="44.4529%" y="287.50">wo..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_tendril (9 samples, 0.72%)</title><rect x="46.2963%" y="261" width="0.7246%" height="15" fill="rgb(250,156,29)" fg:x="575" fg:w="9"/><text x="46.5463%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.7794%" y="245" width="0.2415%" height="15" fill="rgb(216,193,19)" fg:x="581" fg:w="3"/><text x="47.0294%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.24%)</title><rect x="46.7794%" y="229" width="0.2415%" height="15" fill="rgb(216,135,14)" fg:x="581" fg:w="3"/><text x="47.0294%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.24%)</title><rect x="46.7794%" y="213" width="0.2415%" height="15" fill="rgb(241,47,5)" fg:x="581" fg:w="3"/><text x="47.0294%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.24%)</title><rect x="46.7794%" y="197" width="0.2415%" height="15" fill="rgb(233,42,35)" fg:x="581" fg:w="3"/><text x="47.0294%" y="207.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_appropriately (47 samples, 3.78%)</title><rect x="43.5588%" y="293" width="3.7842%" height="15" fill="rgb(231,13,6)" fg:x="541" fg:w="47"/><text x="43.8088%" y="303.50">wof-..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_tendril (4 samples, 0.32%)</title><rect x="47.0209%" y="277" width="0.3221%" height="15" fill="rgb(207,181,40)" fg:x="584" fg:w="4"/><text x="47.2709%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element (3 samples, 0.24%)</title><rect x="47.3430%" y="293" width="0.2415%" height="15" fill="rgb(254,173,49)" fg:x="588" fg:w="3"/><text x="47.5930%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element::form_associatable (1 samples, 0.08%)</title><rect x="47.5845%" y="293" width="0.0805%" height="15" fill="rgb(221,1,38)" fg:x="591" fg:w="1"/><text x="47.8345%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="47.6651%" y="277" width="0.2415%" height="15" fill="rgb(206,124,46)" fg:x="592" fg:w="3"/><text x="47.9151%" y="287.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.9066%" y="277" width="0.0805%" height="15" fill="rgb(249,21,11)" fg:x="595" fg:w="1"/><text x="48.1566%" y="287.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.9066%" y="261" width="0.0805%" height="15" fill="rgb(222,201,40)" fg:x="595" fg:w="1"/><text x="48.1566%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="47.9066%" y="245" width="0.0805%" height="15" fill="rgb(235,61,29)" fg:x="595" fg:w="1"/><text x="48.1566%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="47.9066%" y="229" width="0.0805%" height="15" fill="rgb(219,207,3)" fg:x="595" fg:w="1"/><text x="48.1566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="47.9066%" y="213" width="0.0805%" height="15" fill="rgb(222,56,46)" fg:x="595" fg:w="1"/><text x="48.1566%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="47.9066%" y="197" width="0.0805%" height="15" fill="rgb(239,76,54)" fg:x="595" fg:w="1"/><text x="48.1566%" y="207.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="47.9871%" y="277" width="0.0805%" height="15" fill="rgb(231,124,27)" fg:x="596" fg:w="1"/><text x="48.2371%" y="287.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (3 samples, 0.24%)</title><rect x="48.0676%" y="277" width="0.2415%" height="15" fill="rgb(249,195,6)" fg:x="597" fg:w="3"/><text x="48.3176%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::appropriate_place_for_insertion (1 samples, 0.08%)</title><rect x="48.3092%" y="277" width="0.0805%" height="15" fill="rgb(237,174,47)" fg:x="600" fg:w="1"/><text x="48.5592%" y="287.50"></text></g><g><title>wof-stats-parser`&lt;markup5ever::interface::ExpandedName as core::cmp::PartialEq&lt;markup5ever::interface::ExpandedName&gt;&gt;::eq (3 samples, 0.24%)</title><rect x="48.7923%" y="261" width="0.2415%" height="15" fill="rgb(206,201,31)" fg:x="606" fg:w="3"/><text x="49.0423%" y="271.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;markup5ever::interface::QualName&gt; (1 samples, 0.08%)</title><rect x="49.0338%" y="261" width="0.0805%" height="15" fill="rgb(231,57,52)" fg:x="609" fg:w="1"/><text x="49.2838%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="49.7585%" y="229" width="0.3221%" height="15" fill="rgb(248,177,22)" fg:x="618" fg:w="4"/><text x="50.0085%" y="239.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.8390%" y="213" width="0.2415%" height="15" fill="rgb(215,211,37)" fg:x="619" fg:w="3"/><text x="50.0890%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="49.5974%" y="245" width="0.5636%" height="15" fill="rgb(241,128,51)" fg:x="616" fg:w="7"/><text x="49.8474%" y="255.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$malloc (1 samples, 0.08%)</title><rect x="50.0805%" y="229" width="0.0805%" height="15" fill="rgb(227,165,31)" fg:x="622" fg:w="1"/><text x="50.3305%" y="239.50"></text></g><g><title>wof-stats-parser`ahash::random_state::RandomState::from_keys (1 samples, 0.08%)</title><rect x="50.1610%" y="245" width="0.0805%" height="15" fill="rgb(228,167,24)" fg:x="623" fg:w="1"/><text x="50.4110%" y="255.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;markup5ever::interface::QualName&gt; (2 samples, 0.16%)</title><rect x="50.2415%" y="245" width="0.1610%" height="15" fill="rgb(228,143,12)" fg:x="624" fg:w="2"/><text x="50.4915%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (3 samples, 0.24%)</title><rect x="50.4026%" y="245" width="0.2415%" height="15" fill="rgb(249,149,8)" fg:x="626" fg:w="3"/><text x="50.6526%" y="255.50"></text></g><g><title>wof-stats-parser`markup5ever::interface::tree_builder::create_element (29 samples, 2.33%)</title><rect x="48.3897%" y="277" width="2.3349%" height="15" fill="rgb(243,35,44)" fg:x="601" fg:w="29"/><text x="48.6397%" y="287.50">w..</text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::create_element (20 samples, 1.61%)</title><rect x="49.1143%" y="261" width="1.6103%" height="15" fill="rgb(246,89,9)" fg:x="610" fg:w="20"/><text x="49.3643%" y="271.50"></text></g><g><title>wof-stats-parser`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1 samples, 0.08%)</title><rect x="50.6441%" y="245" width="0.0805%" height="15" fill="rgb(233,213,13)" fg:x="629" fg:w="1"/><text x="50.8941%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="50.7246%" y="261" width="0.0805%" height="15" fill="rgb(233,141,41)" fg:x="630" fg:w="1"/><text x="50.9746%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (1 samples, 0.08%)</title><rect x="50.8052%" y="261" width="0.0805%" height="15" fill="rgb(239,167,4)" fg:x="631" fg:w="1"/><text x="51.0552%" y="271.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element (41 samples, 3.30%)</title><rect x="47.6651%" y="293" width="3.3011%" height="15" fill="rgb(209,217,16)" fg:x="592" fg:w="41"/><text x="47.9151%" y="303.50">wof..</text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::append (3 samples, 0.24%)</title><rect x="50.7246%" y="277" width="0.2415%" height="15" fill="rgb(219,88,35)" fg:x="630" fg:w="3"/><text x="50.9746%" y="287.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::detach (1 samples, 0.08%)</title><rect x="50.8857%" y="261" width="0.0805%" height="15" fill="rgb(220,193,23)" fg:x="632" fg:w="1"/><text x="51.1357%" y="271.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::pop (1 samples, 0.08%)</title><rect x="50.9662%" y="293" width="0.0805%" height="15" fill="rgb(230,90,52)" fg:x="633" fg:w="1"/><text x="51.2162%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="52.0934%" y="277" width="0.0805%" height="15" fill="rgb(252,106,19)" fg:x="647" fg:w="1"/><text x="52.3434%" y="287.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$free (1 samples, 0.08%)</title><rect x="52.1739%" y="277" width="0.0805%" height="15" fill="rgb(206,74,20)" fg:x="648" fg:w="1"/><text x="52.4239%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::in_scope_named (2 samples, 0.16%)</title><rect x="52.2544%" y="261" width="0.1610%" height="15" fill="rgb(230,138,44)" fg:x="649" fg:w="2"/><text x="52.5044%" y="271.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::close_p_element_in_button_scope (8 samples, 0.64%)</title><rect x="52.2544%" y="277" width="0.6441%" height="15" fill="rgb(235,182,43)" fg:x="649" fg:w="8"/><text x="52.5044%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::tag_sets::button_scope (6 samples, 0.48%)</title><rect x="52.4155%" y="261" width="0.4831%" height="15" fill="rgb(242,16,51)" fg:x="651" fg:w="6"/><text x="52.6655%" y="271.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::expect_to_close (1 samples, 0.08%)</title><rect x="52.8986%" y="277" width="0.0805%" height="15" fill="rgb(248,9,4)" fg:x="657" fg:w="1"/><text x="53.1486%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::pop_until_named (1 samples, 0.08%)</title><rect x="52.8986%" y="261" width="0.0805%" height="15" fill="rgb(210,31,22)" fg:x="657" fg:w="1"/><text x="53.1486%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="53.1401%" y="261" width="0.1610%" height="15" fill="rgb(239,54,39)" fg:x="660" fg:w="2"/><text x="53.3901%" y="271.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;markup5ever::interface::QualName&gt; (1 samples, 0.08%)</title><rect x="53.3011%" y="261" width="0.0805%" height="15" fill="rgb(230,99,41)" fg:x="662" fg:w="1"/><text x="53.5511%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="53.3816%" y="245" width="0.1610%" height="15" fill="rgb(253,106,12)" fg:x="663" fg:w="2"/><text x="53.6316%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;markup5ever::interface::ExpandedName as core::cmp::PartialEq&lt;markup5ever::interface::ExpandedName&gt;&gt;::eq (6 samples, 0.48%)</title><rect x="53.5427%" y="245" width="0.4831%" height="15" fill="rgb(213,46,41)" fg:x="665" fg:w="6"/><text x="53.7927%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (1 samples, 0.08%)</title><rect x="54.0258%" y="245" width="0.0805%" height="15" fill="rgb(215,133,35)" fg:x="671" fg:w="1"/><text x="54.2758%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="54.1868%" y="213" width="0.0805%" height="15" fill="rgb(213,28,5)" fg:x="673" fg:w="1"/><text x="54.4368%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="54.2673%" y="197" width="0.0805%" height="15" fill="rgb(215,77,49)" fg:x="674" fg:w="1"/><text x="54.5173%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.08%)</title><rect x="54.3478%" y="197" width="0.0805%" height="15" fill="rgb(248,100,22)" fg:x="675" fg:w="1"/><text x="54.5978%" y="207.50"></text></g><g><title>wof-stats-parser`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="54.2673%" y="213" width="0.2415%" height="15" fill="rgb(208,67,9)" fg:x="674" fg:w="3"/><text x="54.5173%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.4283%" y="197" width="0.0805%" height="15" fill="rgb(219,133,21)" fg:x="676" fg:w="1"/><text x="54.6783%" y="207.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$free (1 samples, 0.08%)</title><rect x="54.5089%" y="213" width="0.0805%" height="15" fill="rgb(246,46,29)" fg:x="677" fg:w="1"/><text x="54.7589%" y="223.50"></text></g><g><title>wof-stats-parser`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.5894%" y="213" width="0.0805%" height="15" fill="rgb(246,185,52)" fg:x="678" fg:w="1"/><text x="54.8394%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="54.1868%" y="229" width="0.5636%" height="15" fill="rgb(252,136,11)" fg:x="673" fg:w="7"/><text x="54.4368%" y="239.50"></text></g><g><title>wof-stats-parser`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1 samples, 0.08%)</title><rect x="54.6699%" y="213" width="0.0805%" height="15" fill="rgb(219,138,53)" fg:x="679" fg:w="1"/><text x="54.9199%" y="223.50"></text></g><g><title>wof-stats-parser`markup5ever::interface::tree_builder::create_element (19 samples, 1.53%)</title><rect x="53.3816%" y="261" width="1.5298%" height="15" fill="rgb(211,51,23)" fg:x="663" fg:w="19"/><text x="53.6316%" y="271.50"></text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::create_element (10 samples, 0.81%)</title><rect x="54.1063%" y="245" width="0.8052%" height="15" fill="rgb(247,221,28)" fg:x="672" fg:w="10"/><text x="54.3563%" y="255.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (2 samples, 0.16%)</title><rect x="54.7504%" y="229" width="0.1610%" height="15" fill="rgb(251,222,45)" fg:x="680" fg:w="2"/><text x="55.0004%" y="239.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element (25 samples, 2.01%)</title><rect x="52.9791%" y="277" width="2.0129%" height="15" fill="rgb(217,162,53)" fg:x="658" fg:w="25"/><text x="53.2291%" y="287.50">w..</text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::append (1 samples, 0.08%)</title><rect x="54.9114%" y="261" width="0.0805%" height="15" fill="rgb(229,93,14)" fg:x="682" fg:w="1"/><text x="55.1614%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (1 samples, 0.08%)</title><rect x="54.9114%" y="245" width="0.0805%" height="15" fill="rgb(209,67,49)" fg:x="682" fg:w="1"/><text x="55.1614%" y="255.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::pop_until_named (1 samples, 0.08%)</title><rect x="54.9919%" y="277" width="0.0805%" height="15" fill="rgb(213,87,29)" fg:x="683" fg:w="1"/><text x="55.2419%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (51 samples, 4.11%)</title><rect x="51.0467%" y="293" width="4.1063%" height="15" fill="rgb(205,151,52)" fg:x="634" fg:w="51"/><text x="51.2967%" y="303.50">wof-..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::tag_sets::cursory_implied_end (1 samples, 0.08%)</title><rect x="55.0725%" y="277" width="0.0805%" height="15" fill="rgb(253,215,39)" fg:x="684" fg:w="1"/><text x="55.3225%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::any_not_whitespace (6 samples, 0.48%)</title><rect x="55.1530%" y="293" width="0.4831%" height="15" fill="rgb(221,220,41)" fg:x="685" fg:w="6"/><text x="55.4030%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::emit_current_tag (279 samples, 22.46%)</title><rect x="33.3333%" y="357" width="22.4638%" height="15" fill="rgb(218,133,21)" fg:x="414" fg:w="279"/><text x="33.5833%" y="367.50">wof-stats-parser`html5ever::tokenize..</text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::process_token (237 samples, 19.08%)</title><rect x="36.7150%" y="341" width="19.0821%" height="15" fill="rgb(221,193,43)" fg:x="456" fg:w="237"/><text x="36.9650%" y="351.50">wof-stats-parser`html5ever::to..</text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (236 samples, 19.00%)</title><rect x="36.7955%" y="325" width="19.0016%" height="15" fill="rgb(240,128,52)" fg:x="457" fg:w="236"/><text x="37.0455%" y="335.50">wof-stats-parser`&lt;html5ever::t..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (203 samples, 16.34%)</title><rect x="39.4525%" y="309" width="16.3446%" height="15" fill="rgb(253,114,12)" fg:x="490" fg:w="203"/><text x="39.7025%" y="319.50">wof-stats-parser`html5eve..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::tag_sets::table_body_context (2 samples, 0.16%)</title><rect x="55.6361%" y="293" width="0.1610%" height="15" fill="rgb(215,223,47)" fg:x="691" fg:w="2"/><text x="55.8861%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::finish_attribute (2 samples, 0.16%)</title><rect x="55.7971%" y="357" width="0.1610%" height="15" fill="rgb(248,225,23)" fg:x="693" fg:w="2"/><text x="56.0471%" y="367.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::next (7 samples, 0.56%)</title><rect x="56.1997%" y="341" width="0.5636%" height="15" fill="rgb(250,108,0)" fg:x="698" fg:w="7"/><text x="56.4497%" y="351.50"></text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (4 samples, 0.32%)</title><rect x="56.4412%" y="325" width="0.3221%" height="15" fill="rgb(228,208,7)" fg:x="701" fg:w="4"/><text x="56.6912%" y="335.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::get_char (20 samples, 1.61%)</title><rect x="55.9581%" y="357" width="1.6103%" height="15" fill="rgb(244,45,10)" fg:x="695" fg:w="20"/><text x="56.2081%" y="367.50"></text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (10 samples, 0.81%)</title><rect x="56.7633%" y="341" width="0.8052%" height="15" fill="rgb(207,125,25)" fg:x="705" fg:w="10"/><text x="57.0133%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::get_preprocessed_char (11 samples, 0.89%)</title><rect x="57.5684%" y="357" width="0.8857%" height="15" fill="rgb(210,195,18)" fg:x="715" fg:w="11"/><text x="57.8184%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="59.7424%" y="341" width="0.0805%" height="15" fill="rgb(249,80,12)" fg:x="742" fg:w="1"/><text x="59.9924%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::get_preprocessed_char (5 samples, 0.40%)</title><rect x="59.8229%" y="341" width="0.4026%" height="15" fill="rgb(221,65,9)" fg:x="743" fg:w="5"/><text x="60.0729%" y="351.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::pop_except_from (58 samples, 4.67%)</title><rect x="60.2254%" y="341" width="4.6699%" height="15" fill="rgb(235,49,36)" fg:x="748" fg:w="58"/><text x="60.4754%" y="351.50">wof-s..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (9 samples, 0.72%)</title><rect x="64.1707%" y="325" width="0.7246%" height="15" fill="rgb(225,32,20)" fg:x="797" fg:w="9"/><text x="64.4207%" y="335.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::pop_except_from (82 samples, 6.60%)</title><rect x="58.4541%" y="357" width="6.6023%" height="15" fill="rgb(215,141,46)" fg:x="726" fg:w="82"/><text x="58.7041%" y="367.50">wof-stats..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (2 samples, 0.16%)</title><rect x="64.8953%" y="341" width="0.1610%" height="15" fill="rgb(250,160,47)" fg:x="806" fg:w="2"/><text x="65.1453%" y="351.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_appropriately (1 samples, 0.08%)</title><rect x="66.6667%" y="309" width="0.0805%" height="15" fill="rgb(216,222,40)" fg:x="828" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::appropriate_place_for_insertion (1 samples, 0.08%)</title><rect x="66.9887%" y="293" width="0.0805%" height="15" fill="rgb(234,217,39)" fg:x="832" fg:w="1"/><text x="67.2387%" y="303.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::to_index (1 samples, 0.08%)</title><rect x="67.0692%" y="277" width="0.0805%" height="15" fill="rgb(207,178,40)" fg:x="833" fg:w="1"/><text x="67.3192%" y="287.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (1 samples, 0.08%)</title><rect x="67.1498%" y="277" width="0.0805%" height="15" fill="rgb(221,136,13)" fg:x="834" fg:w="1"/><text x="67.3998%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::appropriate_place_for_insertion (3 samples, 0.24%)</title><rect x="67.2303%" y="277" width="0.2415%" height="15" fill="rgb(249,199,10)" fg:x="835" fg:w="3"/><text x="67.4803%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.16%)</title><rect x="67.5523%" y="261" width="0.1610%" height="15" fill="rgb(249,222,13)" fg:x="839" fg:w="2"/><text x="67.8023%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.32%)</title><rect x="67.7134%" y="261" width="0.3221%" height="15" fill="rgb(244,185,38)" fg:x="841" fg:w="4"/><text x="67.9634%" y="271.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="68.0354%" y="261" width="0.0805%" height="15" fill="rgb(236,202,9)" fg:x="845" fg:w="1"/><text x="68.2854%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeId::from_index (1 samples, 0.08%)</title><rect x="68.1159%" y="261" width="0.0805%" height="15" fill="rgb(250,229,37)" fg:x="846" fg:w="1"/><text x="68.3659%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::NodeMut&lt;T&gt;::append_id (2 samples, 0.16%)</title><rect x="68.1965%" y="261" width="0.1610%" height="15" fill="rgb(206,174,23)" fg:x="847" fg:w="2"/><text x="68.4465%" y="271.50"></text></g><g><title>wof-stats-parser`ego_tree::Tree&lt;T&gt;::orphan (7 samples, 0.56%)</title><rect x="68.3575%" y="261" width="0.5636%" height="15" fill="rgb(211,33,43)" fg:x="849" fg:w="7"/><text x="68.6075%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="68.5990%" y="245" width="0.3221%" height="15" fill="rgb(245,58,50)" fg:x="852" fg:w="4"/><text x="68.8490%" y="255.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="68.5990%" y="229" width="0.3221%" height="15" fill="rgb(244,68,36)" fg:x="852" fg:w="4"/><text x="68.8490%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.32%)</title><rect x="68.5990%" y="213" width="0.3221%" height="15" fill="rgb(232,229,15)" fg:x="852" fg:w="4"/><text x="68.8490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.32%)</title><rect x="68.5990%" y="197" width="0.3221%" height="15" fill="rgb(254,30,23)" fg:x="852" fg:w="4"/><text x="68.8490%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.32%)</title><rect x="68.5990%" y="181" width="0.3221%" height="15" fill="rgb(235,160,14)" fg:x="852" fg:w="4"/><text x="68.8490%" y="191.50"></text></g><g><title>wof-stats-parser`__rdl_realloc (1 samples, 0.08%)</title><rect x="69.1626%" y="245" width="0.0805%" height="15" fill="rgb(212,155,44)" fg:x="859" fg:w="1"/><text x="69.4126%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="69.2432%" y="229" width="0.0805%" height="15" fill="rgb(226,2,50)" fg:x="860" fg:w="1"/><text x="69.4932%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.08%)</title><rect x="69.4042%" y="213" width="0.0805%" height="15" fill="rgb(234,177,6)" fg:x="862" fg:w="1"/><text x="69.6542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.08%)</title><rect x="69.5652%" y="197" width="0.0805%" height="15" fill="rgb(217,24,9)" fg:x="864" fg:w="1"/><text x="69.8152%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="69.6457%" y="197" width="0.0805%" height="15" fill="rgb(220,13,46)" fg:x="865" fg:w="1"/><text x="69.8957%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.08%)</title><rect x="69.7262%" y="181" width="0.0805%" height="15" fill="rgb(239,221,27)" fg:x="866" fg:w="1"/><text x="69.9762%" y="191.50"></text></g><g><title>wof-stats-parser`scraper::html::tree_sink::_&lt;impl markup5ever::interface::tree_builder::TreeSink for scraper::html::Html&gt;::append (32 samples, 2.58%)</title><rect x="67.4718%" y="277" width="2.5765%" height="15" fill="rgb(222,198,25)" fg:x="838" fg:w="32"/><text x="67.7218%" y="287.50">wo..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_tendril (14 samples, 1.13%)</title><rect x="68.9211%" y="261" width="1.1272%" height="15" fill="rgb(211,99,13)" fg:x="856" fg:w="14"/><text x="69.1711%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (10 samples, 0.81%)</title><rect x="69.2432%" y="245" width="0.8052%" height="15" fill="rgb(232,111,31)" fg:x="860" fg:w="10"/><text x="69.4932%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.72%)</title><rect x="69.3237%" y="229" width="0.7246%" height="15" fill="rgb(245,82,37)" fg:x="861" fg:w="9"/><text x="69.5737%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.56%)</title><rect x="69.4847%" y="213" width="0.5636%" height="15" fill="rgb(227,149,46)" fg:x="863" fg:w="7"/><text x="69.7347%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.32%)</title><rect x="69.7262%" y="197" width="0.3221%" height="15" fill="rgb(218,36,50)" fg:x="866" fg:w="4"/><text x="69.9762%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.24%)</title><rect x="69.8068%" y="181" width="0.2415%" height="15" fill="rgb(226,80,48)" fg:x="867" fg:w="3"/><text x="70.0568%" y="191.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_appropriately (38 samples, 3.06%)</title><rect x="67.0692%" y="293" width="3.0596%" height="15" fill="rgb(238,224,15)" fg:x="833" fg:w="38"/><text x="67.3192%" y="303.50">wof..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_tendril (1 samples, 0.08%)</title><rect x="70.0483%" y="277" width="0.0805%" height="15" fill="rgb(241,136,10)" fg:x="870" fg:w="1"/><text x="70.2983%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (43 samples, 3.46%)</title><rect x="66.7472%" y="309" width="3.4622%" height="15" fill="rgb(208,32,45)" fg:x="829" fg:w="43"/><text x="66.9972%" y="319.50">wof..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::reconstruct_formatting (1 samples, 0.08%)</title><rect x="70.1288%" y="293" width="0.0805%" height="15" fill="rgb(207,135,9)" fg:x="871" fg:w="1"/><text x="70.3788%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (67 samples, 5.39%)</title><rect x="65.2979%" y="341" width="5.3945%" height="15" fill="rgb(206,86,44)" fg:x="811" fg:w="67"/><text x="65.5479%" y="351.50">wof-sta..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (53 samples, 4.27%)</title><rect x="66.4251%" y="325" width="4.2673%" height="15" fill="rgb(245,177,15)" fg:x="825" fg:w="53"/><text x="66.6751%" y="335.50">wof-s..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::any_not_whitespace (6 samples, 0.48%)</title><rect x="70.2093%" y="309" width="0.4831%" height="15" fill="rgb(206,64,50)" fg:x="872" fg:w="6"/><text x="70.4593%" y="319.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::process_token (72 samples, 5.80%)</title><rect x="65.0564%" y="357" width="5.7971%" height="15" fill="rgb(234,36,40)" fg:x="808" fg:w="72"/><text x="65.3064%" y="367.50">wof-sta..</text></g><g><title>wof-stats-parser`html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (2 samples, 0.16%)</title><rect x="70.6924%" y="341" width="0.1610%" height="15" fill="rgb(213,64,8)" fg:x="878" fg:w="2"/><text x="70.9424%" y="351.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::next (24 samples, 1.93%)</title><rect x="70.8535%" y="357" width="1.9324%" height="15" fill="rgb(210,75,36)" fg:x="880" fg:w="24"/><text x="71.1035%" y="367.50">w..</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (16 samples, 1.29%)</title><rect x="71.4976%" y="341" width="1.2882%" height="15" fill="rgb(229,88,21)" fg:x="888" fg:w="16"/><text x="71.7476%" y="351.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::peek (2 samples, 0.16%)</title><rect x="72.7858%" y="357" width="0.1610%" height="15" fill="rgb(252,204,47)" fg:x="904" fg:w="2"/><text x="73.0358%" y="367.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::pop_except_from (5 samples, 0.40%)</title><rect x="72.9469%" y="357" width="0.4026%" height="15" fill="rgb(208,77,27)" fg:x="906" fg:w="5"/><text x="73.1969%" y="367.50"></text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::pop_front_char (11 samples, 0.89%)</title><rect x="73.3494%" y="357" width="0.8857%" height="15" fill="rgb(221,76,26)" fg:x="911" fg:w="11"/><text x="73.5994%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="76.3285%" y="341" width="0.0805%" height="15" fill="rgb(225,139,18)" fg:x="948" fg:w="1"/><text x="76.5785%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.16%)</title><rect x="76.5700%" y="293" width="0.1610%" height="15" fill="rgb(230,137,11)" fg:x="951" fg:w="2"/><text x="76.8200%" y="303.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::step (737 samples, 59.34%)</title><rect x="17.7134%" y="373" width="59.3398%" height="15" fill="rgb(212,28,1)" fg:x="220" fg:w="737"/><text x="17.9634%" y="383.50">wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::step</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_bytes_without_validating (35 samples, 2.82%)</title><rect x="74.2351%" y="357" width="2.8180%" height="15" fill="rgb(248,164,17)" fg:x="922" fg:w="35"/><text x="74.4851%" y="367.50">wo..</text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (8 samples, 0.64%)</title><rect x="76.4090%" y="341" width="0.6441%" height="15" fill="rgb(222,171,42)" fg:x="949" fg:w="8"/><text x="76.6590%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.64%)</title><rect x="76.4090%" y="325" width="0.6441%" height="15" fill="rgb(243,84,45)" fg:x="949" fg:w="8"/><text x="76.6590%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.56%)</title><rect x="76.4895%" y="309" width="0.5636%" height="15" fill="rgb(252,49,23)" fg:x="950" fg:w="7"/><text x="76.7395%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.32%)</title><rect x="76.7311%" y="293" width="0.3221%" height="15" fill="rgb(215,19,7)" fg:x="953" fg:w="4"/><text x="76.9811%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.24%)</title><rect x="76.8116%" y="277" width="0.2415%" height="15" fill="rgb(238,81,41)" fg:x="954" fg:w="3"/><text x="77.0616%" y="287.50"></text></g><g><title>wof-stats-parser`html5ever::util::str::lower_ascii_letter (2 samples, 0.16%)</title><rect x="77.0531%" y="373" width="0.1610%" height="15" fill="rgb(210,199,37)" fg:x="957" fg:w="2"/><text x="77.3031%" y="383.50"></text></g><g><title>wof-stats-parser`markup5ever::util::buffer_queue::BufferQueue::next (2 samples, 0.16%)</title><rect x="77.2142%" y="373" width="0.1610%" height="15" fill="rgb(244,192,49)" fg:x="959" fg:w="2"/><text x="77.4642%" y="383.50"></text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::run (759 samples, 61.11%)</title><rect x="16.7472%" y="389" width="61.1111%" height="15" fill="rgb(226,211,11)" fg:x="208" fg:w="759"/><text x="16.9972%" y="399.50">wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::run</text></g><g><title>wof-stats-parser`tendril::tendril::Tendril&lt;F,A&gt;::push_bytes_without_validating (6 samples, 0.48%)</title><rect x="77.3752%" y="373" width="0.4831%" height="15" fill="rgb(236,162,54)" fg:x="961" fg:w="6"/><text x="77.6252%" y="383.50"></text></g><g><title>wof-stats-parser`scraper::html::Html::parse_fragment (770 samples, 62.00%)</title><rect x="16.4251%" y="421" width="61.9968%" height="15" fill="rgb(220,229,9)" fg:x="204" fg:w="770"/><text x="16.6751%" y="431.50">wof-stats-parser`scraper::html::Html::parse_fragment</text></g><g><title>wof-stats-parser`tendril::stream::TendrilSink::one (767 samples, 61.76%)</title><rect x="16.6667%" y="405" width="61.7552%" height="15" fill="rgb(250,87,22)" fg:x="207" fg:w="767"/><text x="16.9167%" y="415.50">wof-stats-parser`tendril::stream::TendrilSink::one</text></g><g><title>wof-stats-parser`html5ever::tokenizer::Tokenizer&lt;Sink&gt;::step (7 samples, 0.56%)</title><rect x="77.8583%" y="389" width="0.5636%" height="15" fill="rgb(239,43,17)" fg:x="967" fg:w="7"/><text x="78.1083%" y="399.50"></text></g><g><title>wof-stats-parser`scraper::selector::Selector::matches_with_scope (2 samples, 0.16%)</title><rect x="78.4219%" y="421" width="0.1610%" height="15" fill="rgb(231,177,25)" fg:x="974" fg:w="2"/><text x="78.6719%" y="431.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;cssparser::tokenizer::Token&gt; (1 samples, 0.08%)</title><rect x="78.6634%" y="405" width="0.0805%" height="15" fill="rgb(219,179,1)" fg:x="977" fg:w="1"/><text x="78.9134%" y="415.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next (1 samples, 0.08%)</title><rect x="78.7440%" y="405" width="0.0805%" height="15" fill="rgb(238,219,53)" fg:x="978" fg:w="1"/><text x="78.9940%" y="415.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::Tokenizer::skip_whitespace (1 samples, 0.08%)</title><rect x="78.7440%" y="389" width="0.0805%" height="15" fill="rgb(232,167,36)" fg:x="978" fg:w="1"/><text x="78.9940%" y="399.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (2 samples, 0.16%)</title><rect x="78.8245%" y="405" width="0.1610%" height="15" fill="rgb(244,19,51)" fg:x="979" fg:w="2"/><text x="79.0745%" y="415.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::next_token (1 samples, 0.08%)</title><rect x="78.9050%" y="389" width="0.0805%" height="15" fill="rgb(224,6,22)" fg:x="980" fg:w="1"/><text x="79.1550%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.16%)</title><rect x="79.5491%" y="389" width="0.1610%" height="15" fill="rgb(224,145,5)" fg:x="988" fg:w="2"/><text x="79.7991%" y="399.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (1 samples, 0.08%)</title><rect x="79.7101%" y="389" width="0.0805%" height="15" fill="rgb(234,130,49)" fg:x="990" fg:w="1"/><text x="79.9601%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.08%)</title><rect x="80.4348%" y="373" width="0.0805%" height="15" fill="rgb(254,6,2)" fg:x="999" fg:w="1"/><text x="80.6848%" y="383.50"></text></g><g><title>wof-stats-parser`&lt;selectors::builder::SelectorBuilder&lt;Impl&gt; as selectors::sink::Push&lt;selectors::parser::Component&lt;Impl&gt;&gt;&gt;::push (1 samples, 0.08%)</title><rect x="80.5153%" y="373" width="0.0805%" height="15" fill="rgb(208,96,46)" fg:x="1000" fg:w="1"/><text x="80.7653%" y="383.50"></text></g><g><title>wof-stats-parser`&lt;string_cache::atom::Atom&lt;Static&gt; as core::convert::From&lt;alloc::borrow::Cow&lt;str&gt;&gt;&gt;::from (7 samples, 0.56%)</title><rect x="80.5958%" y="373" width="0.5636%" height="15" fill="rgb(239,3,39)" fg:x="1001" fg:w="7"/><text x="80.8458%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace (4 samples, 0.32%)</title><rect x="81.1594%" y="373" width="0.3221%" height="15" fill="rgb(233,210,1)" fg:x="1008" fg:w="4"/><text x="81.4094%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (2 samples, 0.16%)</title><rect x="81.3205%" y="357" width="0.1610%" height="15" fill="rgb(244,137,37)" fg:x="1010" fg:w="2"/><text x="81.5705%" y="367.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::next_token (1 samples, 0.08%)</title><rect x="81.4010%" y="341" width="0.0805%" height="15" fill="rgb(240,136,2)" fg:x="1011" fg:w="1"/><text x="81.6510%" y="351.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (1 samples, 0.08%)</title><rect x="81.4815%" y="373" width="0.0805%" height="15" fill="rgb(239,18,37)" fg:x="1012" fg:w="1"/><text x="81.7315%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::Tokenizer::skip_whitespace (1 samples, 0.08%)</title><rect x="81.5620%" y="373" width="0.0805%" height="15" fill="rgb(218,185,22)" fg:x="1013" fg:w="1"/><text x="81.8120%" y="383.50"></text></g><g><title>wof-stats-parser`core::ptr::drop_in_place&lt;cssparser::tokenizer::Token&gt; (2 samples, 0.16%)</title><rect x="81.8035%" y="341" width="0.1610%" height="15" fill="rgb(225,218,4)" fg:x="1016" fg:w="2"/><text x="82.0535%" y="351.50"></text></g><g><title>wof-stats-parser`selectors::parser::parse_qualified_name (12 samples, 0.97%)</title><rect x="81.6425%" y="373" width="0.9662%" height="15" fill="rgb(230,182,32)" fg:x="1014" fg:w="12"/><text x="81.8925%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace (11 samples, 0.89%)</title><rect x="81.7230%" y="357" width="0.8857%" height="15" fill="rgb(242,56,43)" fg:x="1015" fg:w="11"/><text x="81.9730%" y="367.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (8 samples, 0.64%)</title><rect x="81.9646%" y="341" width="0.6441%" height="15" fill="rgb(233,99,24)" fg:x="1018" fg:w="8"/><text x="82.2146%" y="351.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::next_token (4 samples, 0.32%)</title><rect x="82.2866%" y="325" width="0.3221%" height="15" fill="rgb(234,209,42)" fg:x="1022" fg:w="4"/><text x="82.5366%" y="335.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::consume_ident_like (4 samples, 0.32%)</title><rect x="82.2866%" y="309" width="0.3221%" height="15" fill="rgb(227,7,12)" fg:x="1022" fg:w="4"/><text x="82.5366%" y="319.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::consume_name (4 samples, 0.32%)</title><rect x="82.2866%" y="293" width="0.3221%" height="15" fill="rgb(245,203,43)" fg:x="1022" fg:w="4"/><text x="82.5366%" y="303.50"></text></g><g><title>wof-stats-parser`selectors::parser::to_ascii_lowercase (1 samples, 0.08%)</title><rect x="82.6087%" y="373" width="0.0805%" height="15" fill="rgb(238,205,33)" fg:x="1026" fg:w="1"/><text x="82.8587%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (5 samples, 0.40%)</title><rect x="82.8502%" y="341" width="0.4026%" height="15" fill="rgb(231,56,7)" fg:x="1029" fg:w="5"/><text x="83.1002%" y="351.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::next_token (3 samples, 0.24%)</title><rect x="83.0113%" y="325" width="0.2415%" height="15" fill="rgb(244,186,29)" fg:x="1031" fg:w="3"/><text x="83.2613%" y="335.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace (7 samples, 0.56%)</title><rect x="82.7697%" y="357" width="0.5636%" height="15" fill="rgb(234,111,31)" fg:x="1028" fg:w="7"/><text x="83.0197%" y="367.50"></text></g><g><title>wof-stats-parser`cssparser::tokenizer::next_token (1 samples, 0.08%)</title><rect x="83.2528%" y="341" width="0.0805%" height="15" fill="rgb(241,149,10)" fg:x="1034" fg:w="1"/><text x="83.5028%" y="351.50"></text></g><g><title>wof-stats-parser`selectors::parser::parse_selector (45 samples, 3.62%)</title><rect x="79.7907%" y="389" width="3.6232%" height="15" fill="rgb(249,206,44)" fg:x="991" fg:w="45"/><text x="80.0407%" y="399.50">wof-..</text></g><g><title>wof-stats-parser`selectors::parser::try_parse_combinator (9 samples, 0.72%)</title><rect x="82.6892%" y="373" width="0.7246%" height="15" fill="rgb(251,153,30)" fg:x="1027" fg:w="9"/><text x="82.9392%" y="383.50"></text></g><g><title>wof-stats-parser`cssparser::parser::Parser::next_including_whitespace_and_comments (1 samples, 0.08%)</title><rect x="83.3333%" y="357" width="0.0805%" height="15" fill="rgb(239,152,38)" fg:x="1035" fg:w="1"/><text x="83.5833%" y="367.50"></text></g><g><title>wof-stats-parser`scraper::selector::Selector::parse (62 samples, 4.99%)</title><rect x="78.5829%" y="421" width="4.9919%" height="15" fill="rgb(249,139,47)" fg:x="976" fg:w="62"/><text x="78.8329%" y="431.50">wof-st..</text></g><g><title>wof-stats-parser`cssparser::parser::parse_until_before (57 samples, 4.59%)</title><rect x="78.9855%" y="405" width="4.5894%" height="15" fill="rgb(244,64,35)" fg:x="981" fg:w="57"/><text x="79.2355%" y="415.50">wof-s..</text></g><g><title>wof-stats-parser`selectors::parser::to_ascii_lowercase (2 samples, 0.16%)</title><rect x="83.4138%" y="389" width="0.1610%" height="15" fill="rgb(216,46,15)" fg:x="1036" fg:w="2"/><text x="83.6638%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.16%)</title><rect x="83.6554%" y="341" width="0.1610%" height="15" fill="rgb(250,74,19)" fg:x="1039" fg:w="2"/><text x="83.9054%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.64%)</title><rect x="83.8164%" y="325" width="0.6441%" height="15" fill="rgb(249,42,33)" fg:x="1041" fg:w="8"/><text x="84.0664%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (42 samples, 3.38%)</title><rect x="84.4605%" y="325" width="3.3816%" height="15" fill="rgb(242,149,17)" fg:x="1049" fg:w="42"/><text x="84.7105%" y="335.50">wof..</text></g><g><title>wof-stats-parser`serde_json::read::parse_escape (10 samples, 0.81%)</title><rect x="87.0370%" y="309" width="0.8052%" height="15" fill="rgb(244,29,21)" fg:x="1081" fg:w="10"/><text x="87.2870%" y="319.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="87.8422%" y="325" width="0.0805%" height="15" fill="rgb(220,130,37)" fg:x="1091" fg:w="1"/><text x="88.0922%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (54 samples, 4.35%)</title><rect x="83.8164%" y="341" width="4.3478%" height="15" fill="rgb(211,67,2)" fg:x="1041" fg:w="54"/><text x="84.0664%" y="351.50">wof-s..</text></g><g><title>wof-stats-parser`serde_json::read::parse_escape (3 samples, 0.24%)</title><rect x="87.9227%" y="325" width="0.2415%" height="15" fill="rgb(235,68,52)" fg:x="1092" fg:w="3"/><text x="88.1727%" y="335.50"></text></g><g><title>wof-stats-parser`chrono::format::parse::parse (1 samples, 0.08%)</title><rect x="88.1643%" y="325" width="0.0805%" height="15" fill="rgb(246,142,3)" fg:x="1095" fg:w="1"/><text x="88.4143%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (59 samples, 4.75%)</title><rect x="83.5749%" y="405" width="4.7504%" height="15" fill="rgb(241,25,7)" fg:x="1038" fg:w="59"/><text x="83.8249%" y="415.50">wof-st..</text></g><g><title>wof-stats-parser`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (59 samples, 4.75%)</title><rect x="83.5749%" y="389" width="4.7504%" height="15" fill="rgb(242,119,39)" fg:x="1038" fg:w="59"/><text x="83.8249%" y="399.50">wof-st..</text></g><g><title>wof-stats-parser`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (58 samples, 4.67%)</title><rect x="83.6554%" y="373" width="4.6699%" height="15" fill="rgb(241,98,45)" fg:x="1039" fg:w="58"/><text x="83.9054%" y="383.50">wof-s..</text></g><g><title>wof-stats-parser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (58 samples, 4.67%)</title><rect x="83.6554%" y="357" width="4.6699%" height="15" fill="rgb(254,28,30)" fg:x="1039" fg:w="58"/><text x="83.9054%" y="367.50">wof-s..</text></g><g><title>wof-stats-parser`wof_stats_parser::wof_date_format::deserialize (2 samples, 0.16%)</title><rect x="88.1643%" y="341" width="0.1610%" height="15" fill="rgb(241,142,54)" fg:x="1095" fg:w="2"/><text x="88.4143%" y="351.50"></text></g><g><title>wof-stats-parser`core::str::_&lt;impl str&gt;::trim_start_matches (1 samples, 0.08%)</title><rect x="88.2448%" y="325" width="0.0805%" height="15" fill="rgb(222,85,15)" fg:x="1096" fg:w="1"/><text x="88.4948%" y="335.50"></text></g><g><title>wof-stats-parser`serde_json::de::from_trait (60 samples, 4.83%)</title><rect x="83.5749%" y="421" width="4.8309%" height="15" fill="rgb(210,85,47)" fg:x="1038" fg:w="60"/><text x="83.8249%" y="431.50">wof-st..</text></g><g><title>wof-stats-parser`serde_json::de::Deserializer&lt;R&gt;::end_seq (1 samples, 0.08%)</title><rect x="88.3253%" y="405" width="0.0805%" height="15" fill="rgb(224,206,25)" fg:x="1097" fg:w="1"/><text x="88.5753%" y="415.50"></text></g><g><title>wof-stats-parser`servo_arc::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.4058%" y="421" width="0.0805%" height="15" fill="rgb(243,201,19)" fg:x="1098" fg:w="1"/><text x="88.6558%" y="431.50"></text></g><g><title>wof-stats-parser`std::fs::File::create (1 samples, 0.08%)</title><rect x="88.4863%" y="421" width="0.0805%" height="15" fill="rgb(236,59,4)" fg:x="1099" fg:w="1"/><text x="88.7363%" y="431.50"></text></g><g><title>wof-stats-parser`std::fs::OpenOptions::_open (1 samples, 0.08%)</title><rect x="88.4863%" y="405" width="0.0805%" height="15" fill="rgb(254,179,45)" fg:x="1099" fg:w="1"/><text x="88.7363%" y="415.50"></text></g><g><title>wof-stats-parser`std::sys::unix::fs::File::open_c (1 samples, 0.08%)</title><rect x="88.4863%" y="389" width="0.0805%" height="15" fill="rgb(226,14,10)" fg:x="1099" fg:w="1"/><text x="88.7363%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.08%)</title><rect x="88.4863%" y="373" width="0.0805%" height="15" fill="rgb(244,27,41)" fg:x="1099" fg:w="1"/><text x="88.7363%" y="383.50"></text></g><g><title>dyld`start (1,111 samples, 89.45%)</title><rect x="0.0000%" y="517" width="89.4525%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>wof-stats-parser`main (1,111 samples, 89.45%)</title><rect x="0.0000%" y="501" width="89.4525%" height="15" fill="rgb(218,68,31)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="511.50">wof-stats-parser`main</text></g><g><title>wof-stats-parser`std::rt::lang_start_internal (1,111 samples, 89.45%)</title><rect x="0.0000%" y="485" width="89.4525%" height="15" fill="rgb(207,120,37)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="495.50">wof-stats-parser`std::rt::lang_start_internal</text></g><g><title>wof-stats-parser`std::rt::lang_start::_{{closure}} (1,111 samples, 89.45%)</title><rect x="0.0000%" y="469" width="89.4525%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="479.50">wof-stats-parser`std::rt::lang_start::_{{closure}}</text></g><g><title>wof-stats-parser`std::sys_common::backtrace::__rust_begin_short_backtrace (1,111 samples, 89.45%)</title><rect x="0.0000%" y="453" width="89.4525%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="463.50">wof-stats-parser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>wof-stats-parser`wof_stats_parser::main (1,095 samples, 88.16%)</title><rect x="1.2882%" y="437" width="88.1643%" height="15" fill="rgb(206,98,19)" fg:x="16" fg:w="1095"/><text x="1.5382%" y="447.50">wof-stats-parser`wof_stats_parser::main</text></g><g><title>wof-stats-parser`std::fs::read_to_string::inner (11 samples, 0.89%)</title><rect x="88.5668%" y="421" width="0.8857%" height="15" fill="rgb(217,5,26)" fg:x="1100" fg:w="11"/><text x="88.8168%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`read (11 samples, 0.89%)</title><rect x="88.5668%" y="405" width="0.8857%" height="15" fill="rgb(235,190,38)" fg:x="1100" fg:w="11"/><text x="88.8168%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.08%)</title><rect x="89.4525%" y="517" width="0.0805%" height="15" fill="rgb(247,86,24)" fg:x="1111" fg:w="1"/><text x="89.7025%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (7 samples, 0.56%)</title><rect x="89.5330%" y="405" width="0.5636%" height="15" fill="rgb(205,101,16)" fg:x="1112" fg:w="7"/><text x="89.7830%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="90.0966%" y="341" width="0.0805%" height="15" fill="rgb(246,168,33)" fg:x="1119" fg:w="1"/><text x="90.3466%" y="351.50"></text></g><g><title>wof-stats-parser`chrono::format::strftime::StrftimeItems::new (1 samples, 0.08%)</title><rect x="90.1771%" y="341" width="0.0805%" height="15" fill="rgb(231,114,1)" fg:x="1120" fg:w="1"/><text x="90.4271%" y="351.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="90.2576%" y="341" width="0.0805%" height="15" fill="rgb(207,184,53)" fg:x="1121" fg:w="1"/><text x="90.5076%" y="351.50"></text></g><g><title>wof-stats-parser`polars_core::frame::DataFrame::slice (1 samples, 0.08%)</title><rect x="90.3382%" y="341" width="0.0805%" height="15" fill="rgb(224,95,51)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="90.3382%" y="325" width="0.0805%" height="15" fill="rgb(212,188,45)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="335.50"></text></g><g><title>wof-stats-parser`polars_core::series::implementations::utf8::_&lt;impl polars_core::series::series_trait::SeriesTrait for polars_core::series::implementations::SeriesWrap&lt;polars_core::chunked_array::ChunkedArray&lt;polars_core::datatypes::Utf8Type&gt;&gt;&gt;::slice (1 samples, 0.08%)</title><rect x="90.3382%" y="309" width="0.0805%" height="15" fill="rgb(223,154,38)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="319.50"></text></g><g><title>wof-stats-parser`polars_core::chunked_array::ops::chunkops::slice (1 samples, 0.08%)</title><rect x="90.3382%" y="293" width="0.0805%" height="15" fill="rgb(251,22,52)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="303.50"></text></g><g><title>wof-stats-parser`arrow2::array::Array::sliced_unchecked (1 samples, 0.08%)</title><rect x="90.3382%" y="277" width="0.0805%" height="15" fill="rgb(229,209,22)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="287.50"></text></g><g><title>wof-stats-parser`&lt;arrow2::array::utf8::Utf8Array&lt;O&gt; as arrow2::array::Array&gt;::to_boxed (1 samples, 0.08%)</title><rect x="90.3382%" y="261" width="0.0805%" height="15" fill="rgb(234,138,34)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;arrow2::datatypes::DataType as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.3382%" y="245" width="0.0805%" height="15" fill="rgb(212,95,11)" fg:x="1122" fg:w="1"/><text x="90.5882%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="90.4187%" y="293" width="0.0805%" height="15" fill="rgb(240,179,47)" fg:x="1123" fg:w="1"/><text x="90.6687%" y="303.50"></text></g><g><title>wof-stats-parser`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (2 samples, 0.16%)</title><rect x="90.4187%" y="325" width="0.1610%" height="15" fill="rgb(240,163,11)" fg:x="1123" fg:w="2"/><text x="90.6687%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;chrono_tz::timezone_impl::TzOffset as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="90.4187%" y="309" width="0.1610%" height="15" fill="rgb(236,37,12)" fg:x="1123" fg:w="2"/><text x="90.6687%" y="319.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="90.4992%" y="293" width="0.0805%" height="15" fill="rgb(232,164,16)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="90.4992%" y="277" width="0.0805%" height="15" fill="rgb(244,205,15)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="287.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.4992%" y="261" width="0.0805%" height="15" fill="rgb(223,117,47)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="90.4992%" y="245" width="0.0805%" height="15" fill="rgb(244,107,35)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="255.50"></text></g><g><title>wof-stats-parser`chrono::naive::datetime::NaiveDateTime::checked_add_signed (1 samples, 0.08%)</title><rect x="90.5797%" y="325" width="0.0805%" height="15" fill="rgb(205,140,8)" fg:x="1125" fg:w="1"/><text x="90.8297%" y="335.50"></text></g><g><title>wof-stats-parser`chrono::naive::date::NaiveDate::checked_add_signed (1 samples, 0.08%)</title><rect x="90.5797%" y="309" width="0.0805%" height="15" fill="rgb(228,84,46)" fg:x="1125" fg:w="1"/><text x="90.8297%" y="319.50"></text></g><g><title>wof-stats-parser`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_utc_datetime (2 samples, 0.16%)</title><rect x="90.6602%" y="325" width="0.1610%" height="15" fill="rgb(254,188,9)" fg:x="1126" fg:w="2"/><text x="90.9102%" y="335.50"></text></g><g><title>wof-stats-parser`memchr::memchr::fallback::memchr (2 samples, 0.16%)</title><rect x="90.8213%" y="325" width="0.1610%" height="15" fill="rgb(206,112,54)" fg:x="1128" fg:w="2"/><text x="91.0713%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.1433%" y="277" width="0.0805%" height="15" fill="rgb(216,84,49)" fg:x="1132" fg:w="1"/><text x="91.3933%" y="287.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.3043%" y="261" width="0.0805%" height="15" fill="rgb(214,194,35)" fg:x="1134" fg:w="1"/><text x="91.5543%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3043%" y="245" width="0.0805%" height="15" fill="rgb(249,28,3)" fg:x="1134" fg:w="1"/><text x="91.5543%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="91.3043%" y="229" width="0.0805%" height="15" fill="rgb(222,56,52)" fg:x="1134" fg:w="1"/><text x="91.5543%" y="239.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner::_{{closure}} (5 samples, 0.40%)</title><rect x="91.3849%" y="261" width="0.4026%" height="15" fill="rgb(245,217,50)" fg:x="1135" fg:w="5"/><text x="91.6349%" y="271.50"></text></g><g><title>wof-stats-parser`core::fmt::write (5 samples, 0.40%)</title><rect x="91.3849%" y="245" width="0.4026%" height="15" fill="rgb(213,201,24)" fg:x="1135" fg:w="5"/><text x="91.6349%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (5 samples, 0.40%)</title><rect x="91.3849%" y="229" width="0.4026%" height="15" fill="rgb(248,116,28)" fg:x="1135" fg:w="5"/><text x="91.6349%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (4 samples, 0.32%)</title><rect x="91.4654%" y="213" width="0.3221%" height="15" fill="rgb(219,72,43)" fg:x="1136" fg:w="4"/><text x="91.7154%" y="223.50"></text></g><g><title>wof-stats-parser`alloc::string::String::push (1 samples, 0.08%)</title><rect x="91.7069%" y="197" width="0.0805%" height="15" fill="rgb(209,138,14)" fg:x="1139" fg:w="1"/><text x="91.9569%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="91.7874%" y="229" width="0.0805%" height="15" fill="rgb(222,18,33)" fg:x="1140" fg:w="1"/><text x="92.0374%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="91.8680%" y="181" width="0.0805%" height="15" fill="rgb(213,199,7)" fg:x="1141" fg:w="1"/><text x="92.1180%" y="191.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="91.8680%" y="229" width="0.1610%" height="15" fill="rgb(250,110,10)" fg:x="1141" fg:w="2"/><text x="92.1180%" y="239.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="91.8680%" y="213" width="0.1610%" height="15" fill="rgb(248,123,6)" fg:x="1141" fg:w="2"/><text x="92.1180%" y="223.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.8680%" y="197" width="0.1610%" height="15" fill="rgb(206,91,31)" fg:x="1141" fg:w="2"/><text x="92.1180%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="91.9485%" y="181" width="0.0805%" height="15" fill="rgb(211,154,13)" fg:x="1142" fg:w="1"/><text x="92.1985%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="91.9485%" y="165" width="0.0805%" height="15" fill="rgb(225,148,7)" fg:x="1142" fg:w="1"/><text x="92.1985%" y="175.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (12 samples, 0.97%)</title><rect x="91.2238%" y="277" width="0.9662%" height="15" fill="rgb(220,160,43)" fg:x="1133" fg:w="12"/><text x="91.4738%" y="287.50"></text></g><g><title>wof-stats-parser`core::fmt::write (5 samples, 0.40%)</title><rect x="91.7874%" y="261" width="0.4026%" height="15" fill="rgb(213,52,39)" fg:x="1140" fg:w="5"/><text x="92.0374%" y="271.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (5 samples, 0.40%)</title><rect x="91.7874%" y="245" width="0.4026%" height="15" fill="rgb(243,137,7)" fg:x="1140" fg:w="5"/><text x="92.0374%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (2 samples, 0.16%)</title><rect x="92.0290%" y="229" width="0.1610%" height="15" fill="rgb(230,79,13)" fg:x="1143" fg:w="2"/><text x="92.2790%" y="239.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="92.0290%" y="213" width="0.1610%" height="15" fill="rgb(247,105,23)" fg:x="1143" fg:w="2"/><text x="92.2790%" y="223.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (27 samples, 2.17%)</title><rect x="90.0966%" y="373" width="2.1739%" height="15" fill="rgb(223,179,41)" fg:x="1119" fg:w="27"/><text x="90.3466%" y="383.50">w..</text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (27 samples, 2.17%)</title><rect x="90.0966%" y="357" width="2.1739%" height="15" fill="rgb(218,9,34)" fg:x="1119" fg:w="27"/><text x="90.3466%" y="367.50">w..</text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (23 samples, 1.85%)</title><rect x="90.4187%" y="341" width="1.8519%" height="15" fill="rgb(222,106,8)" fg:x="1123" fg:w="23"/><text x="90.6687%" y="351.50">w..</text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (16 samples, 1.29%)</title><rect x="90.9823%" y="325" width="1.2882%" height="15" fill="rgb(211,220,0)" fg:x="1130" fg:w="16"/><text x="91.2323%" y="335.50"></text></g><g><title>wof-stats-parser`core::fmt::write (16 samples, 1.29%)</title><rect x="90.9823%" y="309" width="1.2882%" height="15" fill="rgb(229,52,16)" fg:x="1130" fg:w="16"/><text x="91.2323%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="91.0628%" y="293" width="1.2077%" height="15" fill="rgb(212,155,18)" fg:x="1131" fg:w="15"/><text x="91.3128%" y="303.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (1 samples, 0.08%)</title><rect x="92.1900%" y="277" width="0.0805%" height="15" fill="rgb(242,21,14)" fg:x="1145" fg:w="1"/><text x="92.4400%" y="287.50"></text></g><g><title>wof-stats-parser`polars_core::frame::DataFrame::as_single_chunk (1 samples, 0.08%)</title><rect x="92.5121%" y="309" width="0.0805%" height="15" fill="rgb(222,19,48)" fg:x="1149" fg:w="1"/><text x="92.7621%" y="319.50"></text></g><g><title>wof-stats-parser`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.5121%" y="293" width="0.0805%" height="15" fill="rgb(232,45,27)" fg:x="1149" fg:w="1"/><text x="92.7621%" y="303.50"></text></g><g><title>wof-stats-parser`polars_core::frame::DataFrame::slice (1 samples, 0.08%)</title><rect x="92.5926%" y="309" width="0.0805%" height="15" fill="rgb(249,103,42)" fg:x="1150" fg:w="1"/><text x="92.8426%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="92.5926%" y="293" width="0.0805%" height="15" fill="rgb(246,81,33)" fg:x="1150" fg:w="1"/><text x="92.8426%" y="303.50"></text></g><g><title>wof-stats-parser`polars_core::series::implementations::utf8::_&lt;impl polars_core::series::series_trait::SeriesTrait for polars_core::series::implementations::SeriesWrap&lt;polars_core::chunked_array::ChunkedArray&lt;polars_core::datatypes::Utf8Type&gt;&gt;&gt;::slice (1 samples, 0.08%)</title><rect x="92.5926%" y="277" width="0.0805%" height="15" fill="rgb(252,33,42)" fg:x="1150" fg:w="1"/><text x="92.8426%" y="287.50"></text></g><g><title>wof-stats-parser`polars_core::chunked_array::ops::chunkops::slice (1 samples, 0.08%)</title><rect x="92.5926%" y="261" width="0.0805%" height="15" fill="rgb(209,212,41)" fg:x="1150" fg:w="1"/><text x="92.8426%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="92.6731%" y="293" width="0.0805%" height="15" fill="rgb(207,154,6)" fg:x="1151" fg:w="1"/><text x="92.9231%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="92.7536%" y="245" width="0.0805%" height="15" fill="rgb(223,64,47)" fg:x="1152" fg:w="1"/><text x="93.0036%" y="255.50"></text></g><g><title>wof-stats-parser`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (3 samples, 0.24%)</title><rect x="92.7536%" y="293" width="0.2415%" height="15" fill="rgb(211,161,38)" fg:x="1152" fg:w="3"/><text x="93.0036%" y="303.50"></text></g><g><title>wof-stats-parser`&lt;chrono_tz::timezone_impl::TzOffset as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="92.7536%" y="277" width="0.2415%" height="15" fill="rgb(219,138,40)" fg:x="1152" fg:w="3"/><text x="93.0036%" y="287.50"></text></g><g><title>wof-stats-parser`core::fmt::write (3 samples, 0.24%)</title><rect x="92.7536%" y="261" width="0.2415%" height="15" fill="rgb(241,228,46)" fg:x="1152" fg:w="3"/><text x="93.0036%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="92.8341%" y="245" width="0.1610%" height="15" fill="rgb(223,209,38)" fg:x="1153" fg:w="2"/><text x="93.0841%" y="255.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.9147%" y="229" width="0.0805%" height="15" fill="rgb(236,164,45)" fg:x="1154" fg:w="1"/><text x="93.1647%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="92.9147%" y="213" width="0.0805%" height="15" fill="rgb(231,15,5)" fg:x="1154" fg:w="1"/><text x="93.1647%" y="223.50"></text></g><g><title>wof-stats-parser`chrono::naive::datetime::NaiveDateTime::checked_add_signed (2 samples, 0.16%)</title><rect x="92.9952%" y="293" width="0.1610%" height="15" fill="rgb(252,35,15)" fg:x="1155" fg:w="2"/><text x="93.2452%" y="303.50"></text></g><g><title>wof-stats-parser`chrono::naive::date::NaiveDate::checked_add_signed (2 samples, 0.16%)</title><rect x="92.9952%" y="277" width="0.1610%" height="15" fill="rgb(248,181,18)" fg:x="1155" fg:w="2"/><text x="93.2452%" y="287.50"></text></g><g><title>wof-stats-parser`chrono::offset::fixed::FixedOffset::east (1 samples, 0.08%)</title><rect x="93.1562%" y="293" width="0.0805%" height="15" fill="rgb(233,39,42)" fg:x="1157" fg:w="1"/><text x="93.4062%" y="303.50"></text></g><g><title>wof-stats-parser`memchr::memchr::fallback::memchr (1 samples, 0.08%)</title><rect x="93.2367%" y="293" width="0.0805%" height="15" fill="rgb(238,110,33)" fg:x="1158" fg:w="1"/><text x="93.4867%" y="303.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::fmt_and_escape_str (1 samples, 0.08%)</title><rect x="93.3172%" y="293" width="0.0805%" height="15" fill="rgb(233,195,10)" fg:x="1159" fg:w="1"/><text x="93.5672%" y="303.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="93.3172%" y="277" width="0.0805%" height="15" fill="rgb(254,105,3)" fg:x="1159" fg:w="1"/><text x="93.5672%" y="287.50"></text></g><g><title>wof-stats-parser`&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="93.3172%" y="261" width="0.0805%" height="15" fill="rgb(221,225,9)" fg:x="1159" fg:w="1"/><text x="93.5672%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="93.6393%" y="245" width="0.0805%" height="15" fill="rgb(224,227,45)" fg:x="1163" fg:w="1"/><text x="93.8893%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="93.7198%" y="245" width="0.0805%" height="15" fill="rgb(229,198,43)" fg:x="1164" fg:w="1"/><text x="93.9698%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="93.8003%" y="245" width="0.3221%" height="15" fill="rgb(206,209,35)" fg:x="1165" fg:w="4"/><text x="94.0503%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="94.2029%" y="165" width="0.0805%" height="15" fill="rgb(245,195,53)" fg:x="1170" fg:w="1"/><text x="94.4529%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.32%)</title><rect x="94.2834%" y="165" width="0.3221%" height="15" fill="rgb(240,92,26)" fg:x="1171" fg:w="4"/><text x="94.5334%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.24%)</title><rect x="94.3639%" y="149" width="0.2415%" height="15" fill="rgb(207,40,23)" fg:x="1172" fg:w="3"/><text x="94.6139%" y="159.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="94.2029%" y="229" width="0.4831%" height="15" fill="rgb(223,111,35)" fg:x="1170" fg:w="6"/><text x="94.4529%" y="239.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="94.2029%" y="213" width="0.4831%" height="15" fill="rgb(229,147,28)" fg:x="1170" fg:w="6"/><text x="94.4529%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.48%)</title><rect x="94.2029%" y="197" width="0.4831%" height="15" fill="rgb(211,29,28)" fg:x="1170" fg:w="6"/><text x="94.4529%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.48%)</title><rect x="94.2029%" y="181" width="0.4831%" height="15" fill="rgb(228,72,33)" fg:x="1170" fg:w="6"/><text x="94.4529%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="94.6055%" y="165" width="0.0805%" height="15" fill="rgb(205,214,31)" fg:x="1175" fg:w="1"/><text x="94.8555%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="94.8470%" y="197" width="0.0805%" height="15" fill="rgb(224,111,15)" fg:x="1178" fg:w="1"/><text x="95.0970%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (4 samples, 0.32%)</title><rect x="94.6860%" y="229" width="0.3221%" height="15" fill="rgb(253,21,26)" fg:x="1176" fg:w="4"/><text x="94.9360%" y="239.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8470%" y="213" width="0.1610%" height="15" fill="rgb(245,139,43)" fg:x="1178" fg:w="2"/><text x="95.0970%" y="223.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9275%" y="197" width="0.0805%" height="15" fill="rgb(252,170,7)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="94.9275%" y="181" width="0.0805%" height="15" fill="rgb(231,118,14)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="94.9275%" y="165" width="0.0805%" height="15" fill="rgb(238,83,0)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="94.9275%" y="149" width="0.0805%" height="15" fill="rgb(221,39,39)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="94.9275%" y="133" width="0.0805%" height="15" fill="rgb(222,119,46)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="95.0886%" y="149" width="0.0805%" height="15" fill="rgb(222,165,49)" fg:x="1181" fg:w="1"/><text x="95.3386%" y="159.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="95.0886%" y="197" width="0.2415%" height="15" fill="rgb(219,113,52)" fg:x="1181" fg:w="3"/><text x="95.3386%" y="207.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="95.0886%" y="181" width="0.2415%" height="15" fill="rgb(214,7,15)" fg:x="1181" fg:w="3"/><text x="95.3386%" y="191.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="95.0886%" y="165" width="0.2415%" height="15" fill="rgb(235,32,4)" fg:x="1181" fg:w="3"/><text x="95.3386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.16%)</title><rect x="95.1691%" y="149" width="0.1610%" height="15" fill="rgb(238,90,54)" fg:x="1182" fg:w="2"/><text x="95.4191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.16%)</title><rect x="95.1691%" y="133" width="0.1610%" height="15" fill="rgb(213,208,19)" fg:x="1182" fg:w="2"/><text x="95.4191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="95.2496%" y="117" width="0.0805%" height="15" fill="rgb(233,156,4)" fg:x="1183" fg:w="1"/><text x="95.4996%" y="127.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="95.4911%" y="181" width="0.0805%" height="15" fill="rgb(207,194,5)" fg:x="1186" fg:w="1"/><text x="95.7411%" y="191.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (28 samples, 2.25%)</title><rect x="93.3977%" y="261" width="2.2544%" height="15" fill="rgb(206,111,30)" fg:x="1160" fg:w="28"/><text x="93.6477%" y="271.50">w..</text></g><g><title>wof-stats-parser`chrono::format::format_inner (19 samples, 1.53%)</title><rect x="94.1224%" y="245" width="1.5298%" height="15" fill="rgb(243,70,54)" fg:x="1169" fg:w="19"/><text x="94.3724%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::write (8 samples, 0.64%)</title><rect x="95.0081%" y="229" width="0.6441%" height="15" fill="rgb(242,28,8)" fg:x="1180" fg:w="8"/><text x="95.2581%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (7 samples, 0.56%)</title><rect x="95.0886%" y="213" width="0.5636%" height="15" fill="rgb(219,106,18)" fg:x="1181" fg:w="7"/><text x="95.3386%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (4 samples, 0.32%)</title><rect x="95.3301%" y="197" width="0.3221%" height="15" fill="rgb(244,222,10)" fg:x="1184" fg:w="4"/><text x="95.5801%" y="207.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="95.5717%" y="181" width="0.0805%" height="15" fill="rgb(236,179,52)" fg:x="1187" fg:w="1"/><text x="95.8217%" y="191.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (38 samples, 3.06%)</title><rect x="92.6731%" y="309" width="3.0596%" height="15" fill="rgb(213,23,39)" fg:x="1151" fg:w="38"/><text x="92.9231%" y="319.50">wof..</text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (29 samples, 2.33%)</title><rect x="93.3977%" y="293" width="2.3349%" height="15" fill="rgb(238,48,10)" fg:x="1160" fg:w="29"/><text x="93.6477%" y="303.50">w..</text></g><g><title>wof-stats-parser`core::fmt::write (29 samples, 2.33%)</title><rect x="93.3977%" y="277" width="2.3349%" height="15" fill="rgb(251,196,23)" fg:x="1160" fg:w="29"/><text x="93.6477%" y="287.50">w..</text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.6522%" y="261" width="0.0805%" height="15" fill="rgb(250,152,24)" fg:x="1188" fg:w="1"/><text x="95.9022%" y="271.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (44 samples, 3.54%)</title><rect x="92.2705%" y="341" width="3.5427%" height="15" fill="rgb(209,150,17)" fg:x="1146" fg:w="44"/><text x="92.5205%" y="351.50">wof-..</text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (44 samples, 3.54%)</title><rect x="92.2705%" y="325" width="3.5427%" height="15" fill="rgb(234,202,34)" fg:x="1146" fg:w="44"/><text x="92.5205%" y="335.50">wof-..</text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="95.7327%" y="309" width="0.0805%" height="15" fill="rgb(253,148,53)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="319.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="95.7327%" y="293" width="0.0805%" height="15" fill="rgb(218,129,16)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="303.50"></text></g><g><title>wof-stats-parser`core::fmt::Write::write_char (1 samples, 0.08%)</title><rect x="95.7327%" y="277" width="0.0805%" height="15" fill="rgb(216,85,19)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="287.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7327%" y="261" width="0.0805%" height="15" fill="rgb(235,228,7)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="271.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7327%" y="245" width="0.0805%" height="15" fill="rgb(245,175,0)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="95.7327%" y="229" width="0.0805%" height="15" fill="rgb(208,168,36)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="95.7327%" y="213" width="0.0805%" height="15" fill="rgb(246,171,24)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.08%)</title><rect x="95.7327%" y="197" width="0.0805%" height="15" fill="rgb(215,142,24)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="95.7327%" y="181" width="0.0805%" height="15" fill="rgb(250,187,7)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.08%)</title><rect x="95.7327%" y="165" width="0.0805%" height="15" fill="rgb(228,66,33)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.08%)</title><rect x="95.7327%" y="149" width="0.0805%" height="15" fill="rgb(234,215,21)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="95.7327%" y="133" width="0.0805%" height="15" fill="rgb(222,191,20)" fg:x="1189" fg:w="1"/><text x="95.9827%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="95.8937%" y="277" width="0.0805%" height="15" fill="rgb(245,79,54)" fg:x="1191" fg:w="1"/><text x="96.1437%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="95.9742%" y="261" width="0.0805%" height="15" fill="rgb(240,10,37)" fg:x="1192" fg:w="1"/><text x="96.2242%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.0548%" y="213" width="0.0805%" height="15" fill="rgb(214,192,32)" fg:x="1193" fg:w="1"/><text x="96.3048%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.1353%" y="213" width="0.0805%" height="15" fill="rgb(209,36,54)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="223.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1353%" y="197" width="0.0805%" height="15" fill="rgb(220,10,11)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="207.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1353%" y="181" width="0.0805%" height="15" fill="rgb(221,106,17)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="96.1353%" y="165" width="0.0805%" height="15" fill="rgb(251,142,44)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="96.1353%" y="149" width="0.0805%" height="15" fill="rgb(238,13,15)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.08%)</title><rect x="96.1353%" y="133" width="0.0805%" height="15" fill="rgb(208,107,27)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="96.1353%" y="117" width="0.0805%" height="15" fill="rgb(205,136,37)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.08%)</title><rect x="96.1353%" y="101" width="0.0805%" height="15" fill="rgb(250,205,27)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.08%)</title><rect x="96.1353%" y="85" width="0.0805%" height="15" fill="rgb(210,80,43)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.08%)</title><rect x="96.1353%" y="69" width="0.0805%" height="15" fill="rgb(247,160,36)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="79.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="96.2963%" y="165" width="0.1610%" height="15" fill="rgb(234,13,49)" fg:x="1196" fg:w="2"/><text x="96.5463%" y="175.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="96.2963%" y="149" width="0.1610%" height="15" fill="rgb(234,122,0)" fg:x="1196" fg:w="2"/><text x="96.5463%" y="159.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.2963%" y="133" width="0.1610%" height="15" fill="rgb(207,146,38)" fg:x="1196" fg:w="2"/><text x="96.5463%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.16%)</title><rect x="96.2963%" y="117" width="0.1610%" height="15" fill="rgb(207,177,25)" fg:x="1196" fg:w="2"/><text x="96.5463%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="96.4573%" y="149" width="0.0805%" height="15" fill="rgb(211,178,42)" fg:x="1198" fg:w="1"/><text x="96.7073%" y="159.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (8 samples, 0.64%)</title><rect x="95.9742%" y="277" width="0.6441%" height="15" fill="rgb(230,69,54)" fg:x="1192" fg:w="8"/><text x="96.2242%" y="287.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (7 samples, 0.56%)</title><rect x="96.0548%" y="261" width="0.5636%" height="15" fill="rgb(214,135,41)" fg:x="1193" fg:w="7"/><text x="96.3048%" y="271.50"></text></g><g><title>wof-stats-parser`core::fmt::write (7 samples, 0.56%)</title><rect x="96.0548%" y="245" width="0.5636%" height="15" fill="rgb(237,67,25)" fg:x="1193" fg:w="7"/><text x="96.3048%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="96.0548%" y="229" width="0.5636%" height="15" fill="rgb(222,189,50)" fg:x="1193" fg:w="7"/><text x="96.3048%" y="239.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (5 samples, 0.40%)</title><rect x="96.2158%" y="213" width="0.4026%" height="15" fill="rgb(245,148,34)" fg:x="1195" fg:w="5"/><text x="96.4658%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::write (4 samples, 0.32%)</title><rect x="96.2963%" y="197" width="0.3221%" height="15" fill="rgb(222,29,6)" fg:x="1196" fg:w="4"/><text x="96.5463%" y="207.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (4 samples, 0.32%)</title><rect x="96.2963%" y="181" width="0.3221%" height="15" fill="rgb(221,189,43)" fg:x="1196" fg:w="4"/><text x="96.5463%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (2 samples, 0.16%)</title><rect x="96.4573%" y="165" width="0.1610%" height="15" fill="rgb(207,36,27)" fg:x="1198" fg:w="2"/><text x="96.7073%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="96.5378%" y="149" width="0.0805%" height="15" fill="rgb(217,90,24)" fg:x="1199" fg:w="1"/><text x="96.7878%" y="159.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (11 samples, 0.89%)</title><rect x="95.8132%" y="325" width="0.8857%" height="15" fill="rgb(224,66,35)" fg:x="1190" fg:w="11"/><text x="96.0632%" y="335.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (11 samples, 0.89%)</title><rect x="95.8132%" y="309" width="0.8857%" height="15" fill="rgb(221,13,50)" fg:x="1190" fg:w="11"/><text x="96.0632%" y="319.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (11 samples, 0.89%)</title><rect x="95.8132%" y="293" width="0.8857%" height="15" fill="rgb(236,68,49)" fg:x="1190" fg:w="11"/><text x="96.0632%" y="303.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="96.6184%" y="277" width="0.0805%" height="15" fill="rgb(229,146,28)" fg:x="1200" fg:w="1"/><text x="96.8684%" y="287.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="96.6184%" y="261" width="0.0805%" height="15" fill="rgb(225,31,38)" fg:x="1200" fg:w="1"/><text x="96.8684%" y="271.50"></text></g><g><title>wof-stats-parser`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6184%" y="245" width="0.0805%" height="15" fill="rgb(250,208,3)" fg:x="1200" fg:w="1"/><text x="96.8684%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.7794%" y="197" width="0.0805%" height="15" fill="rgb(246,54,23)" fg:x="1202" fg:w="1"/><text x="97.0294%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner::_{{closure}} (1 samples, 0.08%)</title><rect x="96.8599%" y="181" width="0.0805%" height="15" fill="rgb(243,76,11)" fg:x="1203" fg:w="1"/><text x="97.1099%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="96.8599%" y="165" width="0.0805%" height="15" fill="rgb(245,21,50)" fg:x="1203" fg:w="1"/><text x="97.1099%" y="175.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4 samples, 0.32%)</title><rect x="96.6989%" y="277" width="0.3221%" height="15" fill="rgb(228,9,43)" fg:x="1201" fg:w="4"/><text x="96.9489%" y="287.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (3 samples, 0.24%)</title><rect x="96.7794%" y="261" width="0.2415%" height="15" fill="rgb(208,100,47)" fg:x="1202" fg:w="3"/><text x="97.0294%" y="271.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (3 samples, 0.24%)</title><rect x="96.7794%" y="245" width="0.2415%" height="15" fill="rgb(232,26,8)" fg:x="1202" fg:w="3"/><text x="97.0294%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::write (3 samples, 0.24%)</title><rect x="96.7794%" y="229" width="0.2415%" height="15" fill="rgb(216,166,38)" fg:x="1202" fg:w="3"/><text x="97.0294%" y="239.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="96.7794%" y="213" width="0.2415%" height="15" fill="rgb(251,202,51)" fg:x="1202" fg:w="3"/><text x="97.0294%" y="223.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (2 samples, 0.16%)</title><rect x="96.8599%" y="197" width="0.1610%" height="15" fill="rgb(254,216,34)" fg:x="1203" fg:w="2"/><text x="97.1099%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (1 samples, 0.08%)</title><rect x="96.9404%" y="181" width="0.0805%" height="15" fill="rgb(251,32,27)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="191.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9404%" y="165" width="0.0805%" height="15" fill="rgb(208,127,28)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="175.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9404%" y="149" width="0.0805%" height="15" fill="rgb(224,137,22)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="96.9404%" y="133" width="0.0805%" height="15" fill="rgb(254,70,32)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="96.9404%" y="117" width="0.0805%" height="15" fill="rgb(229,75,37)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="127.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 0.40%)</title><rect x="96.6989%" y="325" width="0.4026%" height="15" fill="rgb(252,64,23)" fg:x="1201" fg:w="5"/><text x="96.9489%" y="335.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 0.40%)</title><rect x="96.6989%" y="309" width="0.4026%" height="15" fill="rgb(232,162,48)" fg:x="1201" fg:w="5"/><text x="96.9489%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (5 samples, 0.40%)</title><rect x="96.6989%" y="293" width="0.4026%" height="15" fill="rgb(246,160,12)" fg:x="1201" fg:w="5"/><text x="96.9489%" y="303.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.0209%" y="277" width="0.0805%" height="15" fill="rgb(247,166,0)" fg:x="1205" fg:w="1"/><text x="97.2709%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.08%)</title><rect x="97.1014%" y="309" width="0.0805%" height="15" fill="rgb(249,219,21)" fg:x="1206" fg:w="1"/><text x="97.3514%" y="319.50"></text></g><g><title>wof-stats-parser`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (1 samples, 0.08%)</title><rect x="97.1820%" y="229" width="0.0805%" height="15" fill="rgb(205,209,3)" fg:x="1207" fg:w="1"/><text x="97.4320%" y="239.50"></text></g><g><title>wof-stats-parser`&lt;chrono_tz::timezone_impl::TzOffset as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.1820%" y="213" width="0.0805%" height="15" fill="rgb(243,44,1)" fg:x="1207" fg:w="1"/><text x="97.4320%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.1820%" y="197" width="0.0805%" height="15" fill="rgb(206,159,16)" fg:x="1207" fg:w="1"/><text x="97.4320%" y="207.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="97.1820%" y="181" width="0.0805%" height="15" fill="rgb(244,77,30)" fg:x="1207" fg:w="1"/><text x="97.4320%" y="191.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (63 samples, 5.07%)</title><rect x="92.2705%" y="357" width="5.0725%" height="15" fill="rgb(218,69,12)" fg:x="1146" fg:w="63"/><text x="92.5205%" y="367.50">wof-st..</text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (19 samples, 1.53%)</title><rect x="95.8132%" y="341" width="1.5298%" height="15" fill="rgb(212,87,7)" fg:x="1190" fg:w="19"/><text x="96.0632%" y="351.50"></text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (3 samples, 0.24%)</title><rect x="97.1014%" y="325" width="0.2415%" height="15" fill="rgb(245,114,25)" fg:x="1206" fg:w="3"/><text x="97.3514%" y="335.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2 samples, 0.16%)</title><rect x="97.1820%" y="309" width="0.1610%" height="15" fill="rgb(210,61,42)" fg:x="1207" fg:w="2"/><text x="97.4320%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.16%)</title><rect x="97.1820%" y="293" width="0.1610%" height="15" fill="rgb(211,52,33)" fg:x="1207" fg:w="2"/><text x="97.4320%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (2 samples, 0.16%)</title><rect x="97.1820%" y="277" width="0.1610%" height="15" fill="rgb(234,58,33)" fg:x="1207" fg:w="2"/><text x="97.4320%" y="287.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 0.16%)</title><rect x="97.1820%" y="261" width="0.1610%" height="15" fill="rgb(220,115,36)" fg:x="1207" fg:w="2"/><text x="97.4320%" y="271.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (2 samples, 0.16%)</title><rect x="97.1820%" y="245" width="0.1610%" height="15" fill="rgb(243,153,54)" fg:x="1207" fg:w="2"/><text x="97.4320%" y="255.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.2625%" y="229" width="0.0805%" height="15" fill="rgb(251,47,18)" fg:x="1208" fg:w="1"/><text x="97.5125%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.2625%" y="213" width="0.0805%" height="15" fill="rgb(242,102,42)" fg:x="1208" fg:w="1"/><text x="97.5125%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="97.2625%" y="197" width="0.0805%" height="15" fill="rgb(234,31,38)" fg:x="1208" fg:w="1"/><text x="97.5125%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="97.2625%" y="181" width="0.0805%" height="15" fill="rgb(221,117,51)" fg:x="1208" fg:w="1"/><text x="97.5125%" y="191.50"></text></g><g><title>wof-stats-parser`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (1 samples, 0.08%)</title><rect x="97.3430%" y="245" width="0.0805%" height="15" fill="rgb(212,20,18)" fg:x="1209" fg:w="1"/><text x="97.5930%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono_tz::timezone_impl::TzOffset as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.3430%" y="229" width="0.0805%" height="15" fill="rgb(245,133,36)" fg:x="1209" fg:w="1"/><text x="97.5930%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.3430%" y="213" width="0.0805%" height="15" fill="rgb(212,6,19)" fg:x="1209" fg:w="1"/><text x="97.5930%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="97.3430%" y="197" width="0.0805%" height="15" fill="rgb(218,1,36)" fg:x="1209" fg:w="1"/><text x="97.5930%" y="207.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.5040%" y="197" width="0.0805%" height="15" fill="rgb(246,84,54)" fg:x="1211" fg:w="1"/><text x="97.7540%" y="207.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.32%)</title><rect x="97.3430%" y="309" width="0.3221%" height="15" fill="rgb(242,110,6)" fg:x="1209" fg:w="4"/><text x="97.5930%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (4 samples, 0.32%)</title><rect x="97.3430%" y="293" width="0.3221%" height="15" fill="rgb(214,47,5)" fg:x="1209" fg:w="4"/><text x="97.5930%" y="303.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4 samples, 0.32%)</title><rect x="97.3430%" y="277" width="0.3221%" height="15" fill="rgb(218,159,25)" fg:x="1209" fg:w="4"/><text x="97.5930%" y="287.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (4 samples, 0.32%)</title><rect x="97.3430%" y="261" width="0.3221%" height="15" fill="rgb(215,211,28)" fg:x="1209" fg:w="4"/><text x="97.5930%" y="271.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (3 samples, 0.24%)</title><rect x="97.4235%" y="245" width="0.2415%" height="15" fill="rgb(238,59,32)" fg:x="1210" fg:w="3"/><text x="97.6735%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::write (3 samples, 0.24%)</title><rect x="97.4235%" y="229" width="0.2415%" height="15" fill="rgb(226,82,3)" fg:x="1210" fg:w="3"/><text x="97.6735%" y="239.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="97.5040%" y="213" width="0.1610%" height="15" fill="rgb(240,164,32)" fg:x="1211" fg:w="2"/><text x="97.7540%" y="223.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="97.5845%" y="197" width="0.0805%" height="15" fill="rgb(232,46,7)" fg:x="1212" fg:w="1"/><text x="97.8345%" y="207.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.5845%" y="181" width="0.0805%" height="15" fill="rgb(229,129,53)" fg:x="1212" fg:w="1"/><text x="97.8345%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.08%)</title><rect x="97.5845%" y="165" width="0.0805%" height="15" fill="rgb(234,188,29)" fg:x="1212" fg:w="1"/><text x="97.8345%" y="175.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.5845%" y="149" width="0.0805%" height="15" fill="rgb(246,141,4)" fg:x="1212" fg:w="1"/><text x="97.8345%" y="159.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 0.08%)</title><rect x="97.6651%" y="309" width="0.0805%" height="15" fill="rgb(229,23,39)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="97.6651%" y="293" width="0.0805%" height="15" fill="rgb(206,12,3)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="97.6651%" y="277" width="0.0805%" height="15" fill="rgb(252,226,20)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="287.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="97.6651%" y="261" width="0.0805%" height="15" fill="rgb(216,123,35)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="271.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="97.6651%" y="245" width="0.0805%" height="15" fill="rgb(212,68,40)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="255.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.6651%" y="229" width="0.0805%" height="15" fill="rgb(254,125,32)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.6651%" y="213" width="0.0805%" height="15" fill="rgb(253,97,22)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="97.6651%" y="197" width="0.0805%" height="15" fill="rgb(241,101,14)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="97.6651%" y="181" width="0.0805%" height="15" fill="rgb(238,103,29)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="191.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner::_{{closure}} (1 samples, 0.08%)</title><rect x="97.6651%" y="165" width="0.0805%" height="15" fill="rgb(233,195,47)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.6651%" y="149" width="0.0805%" height="15" fill="rgb(246,218,30)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="159.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="97.6651%" y="133" width="0.0805%" height="15" fill="rgb(219,145,47)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="143.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="97.6651%" y="117" width="0.0805%" height="15" fill="rgb(243,12,26)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="127.50"></text></g><g><title>wof-stats-parser`alloc::string::String::push (1 samples, 0.08%)</title><rect x="97.6651%" y="101" width="0.0805%" height="15" fill="rgb(214,87,16)" fg:x="1213" fg:w="1"/><text x="97.9151%" y="111.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (6 samples, 0.48%)</title><rect x="97.3430%" y="357" width="0.4831%" height="15" fill="rgb(208,99,42)" fg:x="1209" fg:w="6"/><text x="97.5930%" y="367.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (6 samples, 0.48%)</title><rect x="97.3430%" y="341" width="0.4831%" height="15" fill="rgb(253,99,2)" fg:x="1209" fg:w="6"/><text x="97.5930%" y="351.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (6 samples, 0.48%)</title><rect x="97.3430%" y="325" width="0.4831%" height="15" fill="rgb(220,168,23)" fg:x="1209" fg:w="6"/><text x="97.5930%" y="335.50"></text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.08%)</title><rect x="97.7456%" y="309" width="0.0805%" height="15" fill="rgb(242,38,24)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.08%)</title><rect x="97.7456%" y="293" width="0.0805%" height="15" fill="rgb(225,182,9)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="97.7456%" y="277" width="0.0805%" height="15" fill="rgb(243,178,37)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="287.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="97.7456%" y="261" width="0.0805%" height="15" fill="rgb(232,139,19)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="271.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="97.7456%" y="245" width="0.0805%" height="15" fill="rgb(225,201,24)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="255.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="97.7456%" y="229" width="0.0805%" height="15" fill="rgb(221,47,46)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="239.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.7456%" y="213" width="0.0805%" height="15" fill="rgb(249,23,13)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.7456%" y="197" width="0.0805%" height="15" fill="rgb(219,9,5)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="207.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="97.7456%" y="181" width="0.0805%" height="15" fill="rgb(254,171,16)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="191.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="97.7456%" y="165" width="0.0805%" height="15" fill="rgb(230,171,20)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="175.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner::_{{closure}} (1 samples, 0.08%)</title><rect x="97.7456%" y="149" width="0.0805%" height="15" fill="rgb(210,71,41)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="159.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.7456%" y="133" width="0.0805%" height="15" fill="rgb(206,173,20)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="143.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="97.7456%" y="117" width="0.0805%" height="15" fill="rgb(233,88,34)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="127.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="97.7456%" y="101" width="0.0805%" height="15" fill="rgb(223,209,46)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="111.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="97.7456%" y="85" width="0.0805%" height="15" fill="rgb(250,43,18)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="95.50"></text></g><g><title>wof-stats-parser`alloc::string::String::push (1 samples, 0.08%)</title><rect x="97.7456%" y="69" width="0.0805%" height="15" fill="rgb(208,13,10)" fg:x="1214" fg:w="1"/><text x="97.9956%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.08%)</title><rect x="97.8261%" y="341" width="0.0805%" height="15" fill="rgb(212,200,36)" fg:x="1215" fg:w="1"/><text x="98.0761%" y="351.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (1 samples, 0.08%)</title><rect x="97.9066%" y="197" width="0.0805%" height="15" fill="rgb(225,90,30)" fg:x="1216" fg:w="1"/><text x="98.1566%" y="207.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9066%" y="181" width="0.0805%" height="15" fill="rgb(236,182,39)" fg:x="1216" fg:w="1"/><text x="98.1566%" y="191.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (2 samples, 0.16%)</title><rect x="97.9066%" y="309" width="0.1610%" height="15" fill="rgb(212,144,35)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="319.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 0.16%)</title><rect x="97.9066%" y="293" width="0.1610%" height="15" fill="rgb(228,63,44)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="303.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (2 samples, 0.16%)</title><rect x="97.9066%" y="277" width="0.1610%" height="15" fill="rgb(228,109,6)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="287.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (2 samples, 0.16%)</title><rect x="97.9066%" y="261" width="0.1610%" height="15" fill="rgb(238,117,24)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="271.50"></text></g><g><title>wof-stats-parser`core::fmt::write (2 samples, 0.16%)</title><rect x="97.9066%" y="245" width="0.1610%" height="15" fill="rgb(242,26,26)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="97.9066%" y="229" width="0.1610%" height="15" fill="rgb(221,92,48)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="239.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (2 samples, 0.16%)</title><rect x="97.9066%" y="213" width="0.1610%" height="15" fill="rgb(209,209,32)" fg:x="1216" fg:w="2"/><text x="98.1566%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="97.9871%" y="197" width="0.0805%" height="15" fill="rgb(221,70,22)" fg:x="1217" fg:w="1"/><text x="98.2371%" y="207.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (100 samples, 8.05%)</title><rect x="90.0966%" y="389" width="8.0515%" height="15" fill="rgb(248,145,5)" fg:x="1119" fg:w="100"/><text x="90.3466%" y="399.50">wof-stats-p..</text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (73 samples, 5.88%)</title><rect x="92.2705%" y="373" width="5.8776%" height="15" fill="rgb(226,116,26)" fg:x="1146" fg:w="73"/><text x="92.5205%" y="383.50">wof-sta..</text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (4 samples, 0.32%)</title><rect x="97.8261%" y="357" width="0.3221%" height="15" fill="rgb(244,5,17)" fg:x="1215" fg:w="4"/><text x="98.0761%" y="367.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3 samples, 0.24%)</title><rect x="97.9066%" y="341" width="0.2415%" height="15" fill="rgb(252,159,33)" fg:x="1216" fg:w="3"/><text x="98.1566%" y="351.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.24%)</title><rect x="97.9066%" y="325" width="0.2415%" height="15" fill="rgb(206,71,0)" fg:x="1216" fg:w="3"/><text x="98.1566%" y="335.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (1 samples, 0.08%)</title><rect x="98.0676%" y="309" width="0.0805%" height="15" fill="rgb(233,118,54)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="98.0676%" y="293" width="0.0805%" height="15" fill="rgb(234,83,48)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="98.0676%" y="277" width="0.0805%" height="15" fill="rgb(228,3,54)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="287.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="98.0676%" y="261" width="0.0805%" height="15" fill="rgb(226,155,13)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="271.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="98.0676%" y="245" width="0.0805%" height="15" fill="rgb(241,28,37)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="255.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.0676%" y="229" width="0.0805%" height="15" fill="rgb(233,93,10)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="98.0676%" y="213" width="0.0805%" height="15" fill="rgb(225,113,19)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.0676%" y="197" width="0.0805%" height="15" fill="rgb(241,2,18)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="98.0676%" y="181" width="0.0805%" height="15" fill="rgb(228,207,21)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="191.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (1 samples, 0.08%)</title><rect x="98.0676%" y="165" width="0.0805%" height="15" fill="rgb(213,211,35)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="175.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0676%" y="149" width="0.0805%" height="15" fill="rgb(209,83,10)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="159.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0676%" y="133" width="0.0805%" height="15" fill="rgb(209,164,1)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="98.0676%" y="117" width="0.0805%" height="15" fill="rgb(213,184,43)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="98.0676%" y="101" width="0.0805%" height="15" fill="rgb(231,61,34)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="98.0676%" y="85" width="0.0805%" height="15" fill="rgb(235,75,3)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="95.50"></text></g><g><title>wof-stats-parser`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (1 samples, 0.08%)</title><rect x="98.1481%" y="261" width="0.0805%" height="15" fill="rgb(220,106,47)" fg:x="1219" fg:w="1"/><text x="98.3981%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="98.2287%" y="245" width="0.0805%" height="15" fill="rgb(210,196,33)" fg:x="1220" fg:w="1"/><text x="98.4787%" y="255.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3092%" y="197" width="0.0805%" height="15" fill="rgb(229,154,42)" fg:x="1221" fg:w="1"/><text x="98.5592%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner::_{{closure}} (1 samples, 0.08%)</title><rect x="98.3897%" y="181" width="0.0805%" height="15" fill="rgb(228,114,26)" fg:x="1222" fg:w="1"/><text x="98.6397%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="98.3897%" y="165" width="0.0805%" height="15" fill="rgb(208,144,1)" fg:x="1222" fg:w="1"/><text x="98.6397%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="98.3897%" y="149" width="0.0805%" height="15" fill="rgb(239,112,37)" fg:x="1222" fg:w="1"/><text x="98.6397%" y="159.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="98.3897%" y="133" width="0.0805%" height="15" fill="rgb(210,96,50)" fg:x="1222" fg:w="1"/><text x="98.6397%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="98.3897%" y="117" width="0.0805%" height="15" fill="rgb(222,178,2)" fg:x="1222" fg:w="1"/><text x="98.6397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="98.4702%" y="133" width="0.0805%" height="15" fill="rgb(226,74,18)" fg:x="1223" fg:w="1"/><text x="98.7202%" y="143.50"></text></g><g><title>wof-stats-parser`chrono::format::write_local_minus_utc (2 samples, 0.16%)</title><rect x="98.4702%" y="181" width="0.1610%" height="15" fill="rgb(225,67,54)" fg:x="1223" fg:w="2"/><text x="98.7202%" y="191.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="98.4702%" y="165" width="0.1610%" height="15" fill="rgb(251,92,32)" fg:x="1223" fg:w="2"/><text x="98.7202%" y="175.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.4702%" y="149" width="0.1610%" height="15" fill="rgb(228,149,22)" fg:x="1223" fg:w="2"/><text x="98.7202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="98.5507%" y="133" width="0.0805%" height="15" fill="rgb(243,54,13)" fg:x="1224" fg:w="1"/><text x="98.8007%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="98.5507%" y="117" width="0.0805%" height="15" fill="rgb(243,180,28)" fg:x="1224" fg:w="1"/><text x="98.8007%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="98.5507%" y="101" width="0.0805%" height="15" fill="rgb(208,167,24)" fg:x="1224" fg:w="1"/><text x="98.8007%" y="111.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.6312%" y="149" width="0.0805%" height="15" fill="rgb(245,73,45)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="159.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.6312%" y="133" width="0.0805%" height="15" fill="rgb(237,203,48)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="143.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6312%" y="117" width="0.0805%" height="15" fill="rgb(211,197,16)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="98.6312%" y="101" width="0.0805%" height="15" fill="rgb(243,99,51)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="98.6312%" y="85" width="0.0805%" height="15" fill="rgb(215,123,29)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.08%)</title><rect x="98.6312%" y="69" width="0.0805%" height="15" fill="rgb(239,186,37)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="79.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="98.3092%" y="213" width="0.6441%" height="15" fill="rgb(252,136,39)" fg:x="1221" fg:w="8"/><text x="98.5592%" y="223.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (7 samples, 0.56%)</title><rect x="98.3897%" y="197" width="0.5636%" height="15" fill="rgb(223,213,32)" fg:x="1222" fg:w="7"/><text x="98.6397%" y="207.50"></text></g><g><title>wof-stats-parser`core::fmt::write (4 samples, 0.32%)</title><rect x="98.6312%" y="181" width="0.3221%" height="15" fill="rgb(233,115,5)" fg:x="1225" fg:w="4"/><text x="98.8812%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (4 samples, 0.32%)</title><rect x="98.6312%" y="165" width="0.3221%" height="15" fill="rgb(207,226,44)" fg:x="1225" fg:w="4"/><text x="98.8812%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (3 samples, 0.24%)</title><rect x="98.7118%" y="149" width="0.2415%" height="15" fill="rgb(208,126,0)" fg:x="1226" fg:w="3"/><text x="98.9618%" y="159.50"></text></g><g><title>wof-stats-parser`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="98.8728%" y="133" width="0.0805%" height="15" fill="rgb(244,66,21)" fg:x="1228" fg:w="1"/><text x="99.1228%" y="143.50"></text></g><g><title>wof-stats-parser`alloc::string::String::push (1 samples, 0.08%)</title><rect x="98.8728%" y="117" width="0.0805%" height="15" fill="rgb(222,97,12)" fg:x="1228" fg:w="1"/><text x="99.1228%" y="127.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.8728%" y="101" width="0.0805%" height="15" fill="rgb(219,213,19)" fg:x="1228" fg:w="1"/><text x="99.1228%" y="111.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$realloc (1 samples, 0.08%)</title><rect x="98.8728%" y="85" width="0.0805%" height="15" fill="rgb(252,169,30)" fg:x="1228" fg:w="1"/><text x="99.1228%" y="95.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (10 samples, 0.81%)</title><rect x="98.2287%" y="261" width="0.8052%" height="15" fill="rgb(206,32,51)" fg:x="1220" fg:w="10"/><text x="98.4787%" y="271.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (9 samples, 0.72%)</title><rect x="98.3092%" y="245" width="0.7246%" height="15" fill="rgb(250,172,42)" fg:x="1221" fg:w="9"/><text x="98.5592%" y="255.50"></text></g><g><title>wof-stats-parser`core::fmt::write (9 samples, 0.72%)</title><rect x="98.3092%" y="229" width="0.7246%" height="15" fill="rgb(209,34,43)" fg:x="1221" fg:w="9"/><text x="98.5592%" y="239.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="98.9533%" y="213" width="0.0805%" height="15" fill="rgb(223,11,35)" fg:x="1229" fg:w="1"/><text x="99.2033%" y="223.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.97%)</title><rect x="98.1481%" y="309" width="0.9662%" height="15" fill="rgb(251,219,26)" fg:x="1219" fg:w="12"/><text x="98.3981%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (12 samples, 0.97%)</title><rect x="98.1481%" y="293" width="0.9662%" height="15" fill="rgb(231,119,3)" fg:x="1219" fg:w="12"/><text x="98.3981%" y="303.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (12 samples, 0.97%)</title><rect x="98.1481%" y="277" width="0.9662%" height="15" fill="rgb(216,97,11)" fg:x="1219" fg:w="12"/><text x="98.3981%" y="287.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.0338%" y="261" width="0.0805%" height="15" fill="rgb(223,59,9)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="271.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.0338%" y="245" width="0.0805%" height="15" fill="rgb(233,93,31)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="99.0338%" y="229" width="0.0805%" height="15" fill="rgb(239,81,33)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="239.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="99.1143%" y="181" width="0.0805%" height="15" fill="rgb(213,120,34)" fg:x="1231" fg:w="1"/><text x="99.3643%" y="191.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (2 samples, 0.16%)</title><rect x="99.1143%" y="309" width="0.1610%" height="15" fill="rgb(243,49,53)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="319.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.16%)</title><rect x="99.1143%" y="293" width="0.1610%" height="15" fill="rgb(247,216,33)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (2 samples, 0.16%)</title><rect x="99.1143%" y="277" width="0.1610%" height="15" fill="rgb(226,26,14)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="287.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 0.16%)</title><rect x="99.1143%" y="261" width="0.1610%" height="15" fill="rgb(215,49,53)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="271.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (2 samples, 0.16%)</title><rect x="99.1143%" y="245" width="0.1610%" height="15" fill="rgb(245,162,40)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="255.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (2 samples, 0.16%)</title><rect x="99.1143%" y="229" width="0.1610%" height="15" fill="rgb(229,68,17)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="239.50"></text></g><g><title>wof-stats-parser`core::fmt::write (2 samples, 0.16%)</title><rect x="99.1143%" y="213" width="0.1610%" height="15" fill="rgb(213,182,10)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="223.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="99.1143%" y="197" width="0.1610%" height="15" fill="rgb(245,125,30)" fg:x="1231" fg:w="2"/><text x="99.3643%" y="207.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="99.1948%" y="181" width="0.0805%" height="15" fill="rgb(232,202,2)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.1948%" y="165" width="0.0805%" height="15" fill="rgb(237,140,51)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.1948%" y="149" width="0.0805%" height="15" fill="rgb(236,157,25)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="99.1948%" y="133" width="0.0805%" height="15" fill="rgb(219,209,0)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="143.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::fmt_and_escape_str (1 samples, 0.08%)</title><rect x="99.2754%" y="181" width="0.0805%" height="15" fill="rgb(240,116,54)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="191.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.2754%" y="165" width="0.0805%" height="15" fill="rgb(216,10,36)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.2754%" y="149" width="0.0805%" height="15" fill="rgb(222,72,44)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="99.2754%" y="133" width="0.0805%" height="15" fill="rgb(232,159,9)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="143.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::strftime::StrftimeItems as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.3559%" y="133" width="0.0805%" height="15" fill="rgb(210,39,32)" fg:x="1234" fg:w="1"/><text x="99.6059%" y="143.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 1.37%)</title><rect x="98.1481%" y="341" width="1.3688%" height="15" fill="rgb(216,194,45)" fg:x="1219" fg:w="17"/><text x="98.3981%" y="351.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (17 samples, 1.37%)</title><rect x="98.1481%" y="325" width="1.3688%" height="15" fill="rgb(218,18,35)" fg:x="1219" fg:w="17"/><text x="98.3981%" y="335.50"></text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (3 samples, 0.24%)</title><rect x="99.2754%" y="309" width="0.2415%" height="15" fill="rgb(207,83,51)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="319.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3 samples, 0.24%)</title><rect x="99.2754%" y="293" width="0.2415%" height="15" fill="rgb(225,63,43)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.24%)</title><rect x="99.2754%" y="277" width="0.2415%" height="15" fill="rgb(207,57,36)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="287.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (3 samples, 0.24%)</title><rect x="99.2754%" y="261" width="0.2415%" height="15" fill="rgb(216,99,33)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="271.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.24%)</title><rect x="99.2754%" y="245" width="0.2415%" height="15" fill="rgb(225,42,16)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="255.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (3 samples, 0.24%)</title><rect x="99.2754%" y="229" width="0.2415%" height="15" fill="rgb(220,201,45)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="239.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (3 samples, 0.24%)</title><rect x="99.2754%" y="213" width="0.2415%" height="15" fill="rgb(225,33,4)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="223.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (3 samples, 0.24%)</title><rect x="99.2754%" y="197" width="0.2415%" height="15" fill="rgb(224,33,50)" fg:x="1233" fg:w="3"/><text x="99.5254%" y="207.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (2 samples, 0.16%)</title><rect x="99.3559%" y="181" width="0.1610%" height="15" fill="rgb(246,198,51)" fg:x="1234" fg:w="2"/><text x="99.6059%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::write (2 samples, 0.16%)</title><rect x="99.3559%" y="165" width="0.1610%" height="15" fill="rgb(205,22,4)" fg:x="1234" fg:w="2"/><text x="99.6059%" y="175.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="99.3559%" y="149" width="0.1610%" height="15" fill="rgb(206,3,8)" fg:x="1234" fg:w="2"/><text x="99.6059%" y="159.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="99.4364%" y="133" width="0.0805%" height="15" fill="rgb(251,23,15)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="143.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.4364%" y="117" width="0.0805%" height="15" fill="rgb(252,88,28)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="127.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.4364%" y="101" width="0.0805%" height="15" fill="rgb(212,127,14)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="99.4364%" y="85" width="0.0805%" height="15" fill="rgb(247,145,37)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="95.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 0.08%)</title><rect x="99.5169%" y="341" width="0.0805%" height="15" fill="rgb(209,117,53)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="351.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.5169%" y="325" width="0.0805%" height="15" fill="rgb(212,90,42)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="335.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (1 samples, 0.08%)</title><rect x="99.5169%" y="309" width="0.0805%" height="15" fill="rgb(218,164,37)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="319.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 0.08%)</title><rect x="99.5169%" y="293" width="0.0805%" height="15" fill="rgb(246,65,34)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="303.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.5169%" y="277" width="0.0805%" height="15" fill="rgb(231,100,33)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="287.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (1 samples, 0.08%)</title><rect x="99.5169%" y="261" width="0.0805%" height="15" fill="rgb(228,126,14)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="271.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.5169%" y="245" width="0.0805%" height="15" fill="rgb(215,173,21)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="255.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="99.5169%" y="229" width="0.0805%" height="15" fill="rgb(210,6,40)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="239.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="99.5169%" y="213" width="0.0805%" height="15" fill="rgb(212,48,18)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="223.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="99.5169%" y="197" width="0.0805%" height="15" fill="rgb(230,214,11)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="207.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.5169%" y="181" width="0.0805%" height="15" fill="rgb(254,105,39)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="191.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.5169%" y="165" width="0.0805%" height="15" fill="rgb(245,158,5)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="175.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.5169%" y="149" width="0.0805%" height="15" fill="rgb(249,208,11)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="159.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="99.5169%" y="133" width="0.0805%" height="15" fill="rgb(210,39,28)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="143.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.5169%" y="117" width="0.0805%" height="15" fill="rgb(211,56,53)" fg:x="1236" fg:w="1"/><text x="99.7669%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.08%)</title><rect x="99.5974%" y="325" width="0.0805%" height="15" fill="rgb(226,201,30)" fg:x="1237" fg:w="1"/><text x="99.8474%" y="335.50"></text></g><g><title>wof-stats-parser`memchr::memchr::fallback::memchr2 (1 samples, 0.08%)</title><rect x="99.6779%" y="213" width="0.0805%" height="15" fill="rgb(239,101,34)" fg:x="1238" fg:w="1"/><text x="99.9279%" y="223.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.16%)</title><rect x="99.6779%" y="277" width="0.1610%" height="15" fill="rgb(226,209,5)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="287.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (2 samples, 0.16%)</title><rect x="99.6779%" y="261" width="0.1610%" height="15" fill="rgb(250,105,47)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="271.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2 samples, 0.16%)</title><rect x="99.6779%" y="245" width="0.1610%" height="15" fill="rgb(230,72,3)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="255.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (2 samples, 0.16%)</title><rect x="99.6779%" y="229" width="0.1610%" height="15" fill="rgb(232,218,39)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="239.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.7585%" y="213" width="0.0805%" height="15" fill="rgb(248,166,6)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="223.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.7585%" y="197" width="0.0805%" height="15" fill="rgb(247,89,20)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="207.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.7585%" y="181" width="0.0805%" height="15" fill="rgb(248,130,54)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="191.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="99.7585%" y="165" width="0.0805%" height="15" fill="rgb(234,196,4)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="175.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.7585%" y="149" width="0.0805%" height="15" fill="rgb(250,143,31)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="159.50"></text></g><g><title>wof-stats-parser`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.7585%" y="133" width="0.0805%" height="15" fill="rgb(211,110,34)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.08%)</title><rect x="99.7585%" y="117" width="0.0805%" height="15" fill="rgb(215,124,48)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="99.7585%" y="101" width="0.0805%" height="15" fill="rgb(216,46,13)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="99.7585%" y="85" width="0.0805%" height="15" fill="rgb(205,184,25)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="95.50"></text></g><g><title>wof-stats-parser`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 0.08%)</title><rect x="99.8390%" y="277" width="0.0805%" height="15" fill="rgb(228,1,10)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="287.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.8390%" y="261" width="0.0805%" height="15" fill="rgb(213,116,27)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="271.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (1 samples, 0.08%)</title><rect x="99.8390%" y="245" width="0.0805%" height="15" fill="rgb(241,95,50)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="255.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.8390%" y="229" width="0.0805%" height="15" fill="rgb(238,48,32)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="239.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="99.8390%" y="213" width="0.0805%" height="15" fill="rgb(235,113,49)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="223.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="99.8390%" y="197" width="0.0805%" height="15" fill="rgb(205,127,43)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="207.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="99.8390%" y="181" width="0.0805%" height="15" fill="rgb(250,162,2)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="191.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8390%" y="165" width="0.0805%" height="15" fill="rgb(220,13,41)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="175.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.8390%" y="149" width="0.0805%" height="15" fill="rgb(249,221,25)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="159.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8390%" y="133" width="0.0805%" height="15" fill="rgb(215,208,19)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="143.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="99.8390%" y="117" width="0.0805%" height="15" fill="rgb(236,175,2)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="127.50"></text></g><g><title>all (1,242 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(241,52,2)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (130 samples, 10.47%)</title><rect x="89.5330%" y="517" width="10.4670%" height="15" fill="rgb(248,140,14)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="527.50">libsystem_pthre..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (130 samples, 10.47%)</title><rect x="89.5330%" y="501" width="10.4670%" height="15" fill="rgb(253,22,42)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="511.50">libsystem_pthre..</text></g><g><title>wof-stats-parser`std::sys::unix::thread::Thread::new::thread_start (130 samples, 10.47%)</title><rect x="89.5330%" y="485" width="10.4670%" height="15" fill="rgb(234,61,47)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="495.50">wof-stats-parse..</text></g><g><title>wof-stats-parser`core::ops::function::FnOnce::call_once{{vtable.shim}} (130 samples, 10.47%)</title><rect x="89.5330%" y="469" width="10.4670%" height="15" fill="rgb(208,226,15)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="479.50">wof-stats-parse..</text></g><g><title>wof-stats-parser`std::sys_common::backtrace::__rust_begin_short_backtrace (130 samples, 10.47%)</title><rect x="89.5330%" y="453" width="10.4670%" height="15" fill="rgb(217,221,4)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="463.50">wof-stats-parse..</text></g><g><title>wof-stats-parser`rayon_core::registry::ThreadBuilder::run (130 samples, 10.47%)</title><rect x="89.5330%" y="437" width="10.4670%" height="15" fill="rgb(212,174,34)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="447.50">wof-stats-parse..</text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (130 samples, 10.47%)</title><rect x="89.5330%" y="421" width="10.4670%" height="15" fill="rgb(253,83,4)" fg:x="1112" fg:w="130"/><text x="89.7830%" y="431.50">wof-stats-parse..</text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (123 samples, 9.90%)</title><rect x="90.0966%" y="405" width="9.9034%" height="15" fill="rgb(250,195,49)" fg:x="1119" fg:w="123"/><text x="90.3466%" y="415.50">wof-stats-pars..</text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (23 samples, 1.85%)</title><rect x="98.1481%" y="389" width="1.8519%" height="15" fill="rgb(241,192,25)" fg:x="1219" fg:w="23"/><text x="98.3981%" y="399.50">w..</text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (23 samples, 1.85%)</title><rect x="98.1481%" y="373" width="1.8519%" height="15" fill="rgb(208,124,10)" fg:x="1219" fg:w="23"/><text x="98.3981%" y="383.50">w..</text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (23 samples, 1.85%)</title><rect x="98.1481%" y="357" width="1.8519%" height="15" fill="rgb(222,33,0)" fg:x="1219" fg:w="23"/><text x="98.3981%" y="367.50">w..</text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (5 samples, 0.40%)</title><rect x="99.5974%" y="341" width="0.4026%" height="15" fill="rgb(234,209,28)" fg:x="1237" fg:w="5"/><text x="99.8474%" y="351.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (4 samples, 0.32%)</title><rect x="99.6779%" y="325" width="0.3221%" height="15" fill="rgb(224,11,23)" fg:x="1238" fg:w="4"/><text x="99.9279%" y="335.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.32%)</title><rect x="99.6779%" y="309" width="0.3221%" height="15" fill="rgb(232,99,1)" fg:x="1238" fg:w="4"/><text x="99.9279%" y="319.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (4 samples, 0.32%)</title><rect x="99.6779%" y="293" width="0.3221%" height="15" fill="rgb(237,95,45)" fg:x="1238" fg:w="4"/><text x="99.9279%" y="303.50"></text></g><g><title>wof-stats-parser`rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.08%)</title><rect x="99.9195%" y="277" width="0.0805%" height="15" fill="rgb(208,109,11)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="287.50"></text></g><g><title>wof-stats-parser`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.08%)</title><rect x="99.9195%" y="261" width="0.0805%" height="15" fill="rgb(216,190,48)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="271.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.9195%" y="245" width="0.0805%" height="15" fill="rgb(251,171,36)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="255.50"></text></g><g><title>wof-stats-parser`rayon_core::join::join_context::_{{closure}} (1 samples, 0.08%)</title><rect x="99.9195%" y="229" width="0.0805%" height="15" fill="rgb(230,62,22)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="239.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.08%)</title><rect x="99.9195%" y="213" width="0.0805%" height="15" fill="rgb(225,114,35)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="223.50"></text></g><g><title>wof-stats-parser`rayon::iter::plumbing::Folder::consume_iter (1 samples, 0.08%)</title><rect x="99.9195%" y="197" width="0.0805%" height="15" fill="rgb(215,118,42)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="207.50"></text></g><g><title>wof-stats-parser`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1 samples, 0.08%)</title><rect x="99.9195%" y="181" width="0.0805%" height="15" fill="rgb(243,119,21)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="191.50"></text></g><g><title>wof-stats-parser`polars_io::csv::write_impl::write_anyvalue (1 samples, 0.08%)</title><rect x="99.9195%" y="165" width="0.0805%" height="15" fill="rgb(252,177,53)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="175.50"></text></g><g><title>wof-stats-parser`std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9195%" y="149" width="0.0805%" height="15" fill="rgb(237,209,29)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="159.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.9195%" y="133" width="0.0805%" height="15" fill="rgb(212,65,23)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="143.50"></text></g><g><title>wof-stats-parser`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9195%" y="117" width="0.0805%" height="15" fill="rgb(230,222,46)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="127.50"></text></g><g><title>wof-stats-parser`chrono::format::format_inner (1 samples, 0.08%)</title><rect x="99.9195%" y="101" width="0.0805%" height="15" fill="rgb(215,135,32)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="111.50"></text></g><g><title>wof-stats-parser`core::fmt::write (1 samples, 0.08%)</title><rect x="99.9195%" y="85" width="0.0805%" height="15" fill="rgb(246,101,22)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="95.50"></text></g><g><title>wof-stats-parser`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9195%" y="69" width="0.0805%" height="15" fill="rgb(206,107,13)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="79.50"></text></g><g><title>wof-stats-parser`core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="99.9195%" y="53" width="0.0805%" height="15" fill="rgb(250,100,44)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="63.50"></text></g><g><title>wof-stats-parser`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="99.9195%" y="37" width="0.0805%" height="15" fill="rgb(231,147,38)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="47.50"></text></g></svg></svg>